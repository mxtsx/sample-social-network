{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","App.module.css","components/Footer/Footer.module.css","components/Users/User/User.module.css","components/common/Preloader/Preloader.module.css","components/Profile/Profile.module.css","components/Login/LoginForm.module.css","components/Users/Users.module.css","reportWebVitals.js","api/api.ts","api/authApi.ts","redux/authReducer.ts","logo.svg","components/Header/Header.tsx","redux/authSelectors.ts","components/Header/HeaderContainer.tsx","components/Sidebar/Sidebar.tsx","components/Footer/Footer.tsx","components/common/Preloader/preloader.svg","components/common/Preloader/Preloader.tsx","avatarMan.svg","avatarWoman.svg","utils/validators.ts","components/common/FormControls/FormControls.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusForm.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDescriptionForm.tsx","api/profileApi.ts","api/usersApi.ts","redux/profileReducer.ts","components/Profile/ProfileInfo/UploadPhotoInput.tsx","redux/usersSelectors.ts","redux/usersReducer.ts","redux/profileSelectors.ts","utils/genderValidator.ts","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","redux/errorSelectors.ts","redux/errorReducer.ts","hoc/withError.tsx","components/Profile/ProfileContainer.tsx","components/Users/User/User.tsx","buttonLeft.svg","buttonRight.svg","buttonDoubleLeft.svg","buttonDoubleRight.svg","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","hoc/withLoginRedirect.tsx","components/Users/UsersContainer.tsx","components/Login/LoginForm.tsx","components/Login/Loginn.tsx","components/Login/LoginContainer.tsx","redux/appReducer.ts","api/chatApi.ts","utils/arraysAreEqual.ts","redux/chatReducer.ts","redux/reduxStore.ts","redux/appSelectors.ts","redux/chatSelectors.ts","components/Chat/Chat.tsx","components/Error/Error404.tsx","App.tsx","index.tsx","components/Header/Header.module.css","components/Sidebar/Sidebar.module.css","components/Chat/Chat.module.css","components/common/FormControls/FormControls.module.css","components/Login/Login.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","ServerResponseCode","ServerResponseCaptcha","authAPI","getAuth","get","login","email","password","rememberMe","captcha","post","logout","delete","USER_AUTHENTICATION","LOGOUT","GET_CAPTCHA","initialState","id","auth","captchaURL","actions","type","data","userAuthentication","async","response","resultCode","dispatch","message","messages","stopSubmit","_error","setCaptchaUrl","url","authReducer","state","action","Header","React","memo","userLogout","currentPagePath","useLocation","pathname","className","h","headerContainer","siteInfo","logo","src","alt","networkName","loginInfo","loginContainer","onClick","to","activeClassName","active","getId","getLogin","getCaptchaUrl","HeaderContainer","Component","componentDidMount","this","props","render","connect","Sidebar","s","sidebar","contentWrapper","link","Footer","f","footer","flaticonRef","href","title","Preloader","p","preloaderWrapper","preloaderIcon","requiredField","value","FormControl","meta","touched","error","children","hasError","fc","errorContainer","Input","input","restProps","Textarea","CreateField","placeholder","name","component","text","validate","onBlur","formText","Field","maxLength20","MaxLength","length","ProfileStatusInput","handleSubmit","pi","status","undefined","ProfileStatusForm","reduxForm","form","ProfileStatus","userStatus","setUserStatus","isOwner","isFetching","editMode","setEditMode","useState","initialValues","onDoubleClick","onSubmit","formData","ProfileDescriptionReduxForm","profile","descriptionForm","elementOfDescriptionForm","searchJob","Object","keys","contacts","map","key","htmlType","size","profileAPI","getProfile","getUserStatus","updateUserStatus","put","updateProfileInformation","updateProfilePhoto","photo","FormData","append","usersAPI","getUsers","count","page","term","friend","follow","unfollow","isFollow","res","SET_USER_PROFILE","GET_USER_STATUS","SET_IS_FETCHING","SET_NEW_PHOTO","IS_USER_FOLLOWED","isFollowed","getNewProfile","setIsFetching","setNewPhoto","photos","userIsFollowed","payload","setUserProfile","setNewProfilePhotos","profileReducer","UploadPhotoInput","useDispatch","inputWrapper","onChange","e","target","files","getUsersSelector","usersPage","users","getPageSize","pageSize","getTotalUsersCountSelector","totalUsersCount","getCurrentPage","currentPage","getIsFetching","getFollowingIsFetching","followingIsFetching","getCurrentFilter","filter","GET_USERS","GET_TOTAL_USERS_COUNT","FOLLOW_UNFOLLOW_USER","SET_CURRENT_PAGE","SET_FILTER","FOLLOWING_IS_FETCHING","SET_FETCHING","totalUsers","followed","items","totalCount","followUnfollowUser","followValue","apiMethod","actionCreator","followUser","bind","unfollowUser","usersReducer","u","profilePage","getStatus","getProfileIsFetching","getIsFollowed","userPossiblyIsWoman","ProfileInfo","setUserProfileUpdate","profileEditMode","setProfileEditMode","useSelector","useEffect","userId","profileInfoContainer","large","fullName","iconWoman","iconMan","buttonUnderProfilePhoto","disabled","some","ProfileDescription","areContacts","Boolean","values","v","r","description","aboutMe","elementOfDescription","lookingForAJob","lookingForAJobDescription","contact","Contacts","contactKey","contactValue","Profile","profileContainer","getError","SET_ERROR","setError","errorReducer","withError","showIcon","ProfileContainer","PureComponent","refreshProfilePage","match","params","userID","getCurrentUserStatus","history","push","componentDidUpdate","prevProps","prevState","compose","getState","withRouter","User","user","container","profilePhoto","UsersSearchForm","onFilterChanged","useHistory","isSearch","location","search","substring","resetValues","searchForm","enableReinitialize","String","setSubmitting","isSubmitting","as","searchButtonsInRow","button","icon","SearchOutlined","shape","CloseSquareOutlined","Users","query","queryString","parsedQuery","actualPage","actualFilter","Number","getCurrentUsers","totalPagesCount","Math","ceil","usersWrapper","searchFormAndPage","usersListAndButtons","buttonContainer","buttonDoubleLeft","arrowButton","buttonLeft","usersList","notAllUsers","buttonRight","buttonDoubleRight","mapStateToProps","withLoginRedirect","UsersContainer","LoginForm","lf","loginFormContainer","l","loginTitle","lfc","formSummaryError","LoginReduxForm","Login","userLogin","loginWrapper","LoginContainer","GET_INITIALIZED","isInitialized","appReducer","ws","subscribers","messageHandler","newMessages","JSON","parse","forEach","closeHandler","notifyUserAboutStatus","setTimeout","createChannel","openHandler","errorHandler","console","log","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","start","stop","subscribe","event","callback","unsubscribe","sendMessage","send","arraysAreEqual","sort","CHAT_MESSAGES_RECEIVED","SET_STATUS","_newMessageHandler","newMessageHandlerCreator","_newStatusHandler","newStatusHandlerCreator","sendMessageToChat","chatReducer","m","v4","index","array","slice","reducers","combineReducers","app","formReducer","chat","store","createStore","applyMiddleware","thunkMiddleware","getIsInitialized","getMessages","Chat","c","AllMessages","AddMessageForm","isAutoScroll","setIsAutoScroll","messagesEndRef","useRef","scrollToBottom","current","scrollIntoView","behavior","allMessages","onScroll","element","currentTarget","abs","scrollHeight","scrollTop","clientHeight","ChatMessage","ref","chatMessage","userName","setMessage","statusPendingOrError","addMessageForm","textInput","TextArea","onKeyDown","shiftKey","code","preventDefault","cols","Error404","App","catchAllUnhandledErrors","promiseRejectionEvent","reason","getInitialized","window","componentWillUnmount","a","appContent","main","path","exact","AppContainer","SampleSocialNetworkApp","ReactDOM","document","getElementById"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,qBAAuB,0CAA0C,MAAQ,2BAA2B,aAAe,kCAAkC,YAAc,iCAAiC,KAAO,0BAA0B,OAAS,4BAA4B,qBAAuB,0CAA0C,QAAU,6BAA6B,SAAW,8BAA8B,wBAA0B,6CAA6C,gBAAkB,qCAAqC,yBAA2B,8CAA8C,UAAY,iC,oBCAhoBD,EAAOC,QAAU,CAAC,WAAa,wBAAwB,KAAO,oB,oBCA9DD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,8B,oBCAhED,EAAOC,QAAU,CAAC,UAAY,wBAAwB,aAAe,6B,oBCArED,EAAOC,QAAU,CAAC,iBAAmB,sC,oBCArCD,EAAOC,QAAU,CAAC,iBAAmB,oC,oBCArCD,EAAOC,QAAU,CAAC,mBAAqB,wC,mBCAvCD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,gBAAkB,+BAA+B,aAAe,4BAA4B,kBAAoB,iCAAiC,oBAAsB,mCAAmC,UAAY,yBAAyB,YAAc,2BAA2B,YAAc,2BAA2B,WAAa,0BAA0B,OAAS,sBAAsB,YAAc,2BAA2B,mBAAqB,oC,0GCW7eC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,EAAGC,SAAQC,SAAQC,SAAQC,SAAQC,cAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,0CCNP,MAAMQ,E,OAAWC,EAAMC,OAAO,CACjCC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAIZ,IAAKC,EAKAC,G,SALAD,O,qBAAAA,I,kBAAAA,M,cAKAC,O,uBAAAA,M,KCEL,MAAMC,EAAU,CACnBC,QAAO,IACIT,EAASU,IAAsC,WAE1DC,MAAK,CAACC,EAAeC,EAAkBC,GAAa,EAAOC,EAAyB,OACzEf,EAASgB,KAAwC,aAAc,CAACJ,QAAOC,WAAUC,aAAYC,YAExGE,OAAM,IACKjB,EAASkB,OAA2B,cAE/CH,QAAO,IACIf,EAASU,IAAyB,6BCvB3CS,EAAsB,2BACtBC,EAAS,cACTC,EAAc,mBAEdC,EAAe,CACjBC,GAAI,KACJX,MAAO,KACPD,MAAO,KACPa,MAAM,EACNC,WAAY,MAyBHC,EACC,CAACH,EAAYX,EAAeD,EAAea,GAAO,KAAlD,CAA8DG,KAAMR,EAAqBS,KAAM,CAACL,KAAIX,QAAOD,QAAOa,UADnHE,EAED,MAAQC,KAAMP,IAFbM,EAGID,IAAD,CAA0BE,KAAMN,EAAaI,eAGhDI,EAAqB,IACvBC,UACH,MAAMC,QAAiBvB,EAAQC,UAC/B,GAAgC,IAA7BsB,EAASH,KAAKI,WAAkB,CAC/B,MAAM,MAACpB,EAAD,GAAQW,EAAR,MAAYZ,GAASoB,EAASH,KAAKA,KACzCK,EAASP,EAAiBH,EAAIX,EAAOD,GAAO,QACzC,CACH,MAAMuB,EAAUH,EAASH,KAAKO,SAAS,GAAKJ,EAASH,KAAKO,SAAS,GAAK,0BACxEF,EAASG,YAAW,QAAS,CAACC,OAAQH,OA4BrCI,EAAgB,IAClBR,UACH,MACMf,SADiBP,EAAQO,WACNa,KAAKW,IAC9BN,EAASP,EAAmBX,KAQrByB,MA5EK,CAACC,EAAQnB,EAAcoB,KACvC,OAAOA,EAAOf,MACV,KAAKR,EACD,MAAO,IACAsB,KACAC,EAAOd,MAElB,KAAKR,EACD,MAAO,IACAqB,EACHjB,MAAM,GAEd,KAAKH,EACD,MAAO,IACAoB,EACHhB,WAAYiB,EAAOjB,YAE3B,QACI,OAAOgB,I,iCClCJ,MAA0B,iC,gBCoD1BE,MAnCqBC,IAAMC,MAAK,EAAElC,QAAOa,OAAMsB,iBAC1D,MAAMC,EAAkBC,cAAcC,SACtC,OACI,yBAAQC,UAAWC,IAAEC,gBAArB,UACI,sBAAKF,UAAWC,IAAEE,SAAlB,UACI,qBAAKH,UAAWC,IAAEG,KAAMC,IAAKD,EAAME,IAAI,KACvC,qBAAKN,UAAWC,IAAEM,YAAlB,SACI,8DAKR,qBAAKP,UAAWC,IAAEO,UAAlB,SACI,qBAAKR,UAAWC,IAAEQ,eAAlB,SACKnC,EACO,gCACI,sBAAM0B,UAAWC,IAAExC,MAAnB,SACKA,IAEL,cAAC,IAAD,CAAQgB,KAAK,UAAUiC,QAASd,EAAhC,uBAIgB,WAApBC,GACJ,cAAC,IAAD,CAASc,GAAI,SAAUC,gBAAiBX,IAAEY,OAA1C,SACQ,cAAC,IAAD,CAAQpC,KAAM,UAAd,+BCxCzB,MAAMqC,EAASvB,GACXA,EAAMjB,KAAKD,GAOT0C,EAAYxB,GACdA,EAAMjB,KAAKb,MAGTF,EAAWgC,GACbA,EAAMjB,KAAKA,KAGT0C,EAAiBzB,GACnBA,EAAMjB,KAAKC,WCEtB,MAAM0C,UAAwBC,YAC1BC,oBACIC,KAAKC,MAAM1C,qBAEf2C,SACI,OAAO,cAAC,EAAD,CAAQ7D,MAAO2D,KAAKC,MAAM5D,MAAOa,KAAM8C,KAAKC,MAAM/C,KACzDsB,WAAYwB,KAAKC,MAAMzB,cAWhB2B,mBAPUhC,IACd,CACH9B,MAAOsD,EAASxB,GAChBjB,KAAMf,EAAQgC,MAI2F,CAACZ,qBAAoBiB,WJiC5G,IACfhB,UAE6B,WADTtB,EAAQS,UACnBW,KAAKI,YACbC,EAASP,OIrCN+C,CAAoIN,G,iBCVpIO,MAxBW9B,IAAMC,MAAM0B,GAE9B,uBAAOrB,UAAWyB,IAAEC,QAApB,SACI,sBAAK1B,UAAWyB,IAAEE,eAAlB,UACA,qBAAK3B,UAAWyB,IAAEG,KAAlB,SACI,cAAC,IAAD,CAASjB,GAAI,WAAYC,gBAAiBa,IAAEZ,OAA5C,uBAIJ,qBAAKb,UAAWyB,IAAEG,KAAlB,SACI,cAAC,IAAD,CAASjB,GAAI,SAAUC,gBAAiBa,IAAEZ,OAA1C,qBAIJ,qBAAKb,UAAWyB,IAAEG,KAAlB,SACI,cAAC,IAAD,CAASjB,GAAI,QAASC,gBAAiBa,IAAEZ,OAAzC,2B,kBCPDgB,MATUnC,IAAMC,MAAM0B,GAE7B,yBAAQrB,UAAW8B,IAAEC,OAArB,UACI,8BAAK,+CACL,sBAAK/B,UAAW8B,IAAEE,YAAlB,2BAA6C,mBAAGC,KAAK,0CAA0CC,MAAM,SAAxD,oBAA7C,QAA6H,mBAAGD,KAAK,4CAA4CC,MAAM,WAA1D,sBAA7H,SAAoN,mBAAGD,KAAK,4BAA4BC,MAAM,WAA1C,sC,iBCPjN,MAA0B,sC,kBCY1BC,MARazC,IAAMC,MAAM0B,GAEhC,qBAAKrB,UAAWoC,IAAEC,iBAAlB,SACI,qBAAKhC,IAAKiC,EAAehC,IAAI,SCP1B,MAA0B,sCCA1B,OAA0B,wC,UCElC,MAAMiC,GAAiCC,IAC1C,IAAGA,EACH,MAAO,qB,kCCCX,MAAMC,GAA2C,EAAEC,MAAOC,UAASC,SAAQC,cAAaxB,MACpF,MAAMyB,EAAWH,GAAWC,EAC5B,OACI,sBAAK5C,UAAW8C,EAAWC,KAAGH,MAAQ,GAAtC,UACI,8BACKC,IAEJC,GACD,qBAAK9C,UAAW+C,KAAGC,eAAnB,SACI,+BAAOJ,UAOVK,GAAsC5B,IAC/C,MAAM,MAAC6B,EAAD,KAAQR,KAASS,GAAa9B,EACpC,OAAO,cAACoB,GAAD,IAAiBpB,EAAjB,SAAwB,0BAAW6B,KAAWC,OAG5CC,GAAyC/B,IAClD,MAAM,MAAC6B,EAAD,KAAQR,KAASS,GAAa9B,EACpC,OAAO,cAACoB,GAAD,IAAiBpB,EAAjB,SAAwB,6BAAc6B,KAAWC,OAGrD,SAASE,GAAyCC,EAAkCC,EAAoBC,EAAkD/E,EAA2BgF,EAAO,GAAIC,EAAkC,GAAI1D,EAAoB2D,EAActC,EAAQ,IACnR,OACI,sBAAKrB,UAAWA,EAAhB,UACI,sBAAMA,UAAWyD,GAAQV,KAAGa,SAA5B,SAAuCH,IAD3C,IACwD,cAACI,GAAA,EAAD,CAAOP,YAAaA,EAAaC,KAAMA,EAAMC,UAAWA,EAAW/E,KAAMA,EAAMiF,SAAUA,KAAcrC,OC3BvK,MAAMyC,IFAoBC,GEAI,GFAmCvB,IAC7D,GAAGA,GAASA,EAAMwB,OAASD,GAAW,MAAQ,iBAAgBA,eADxCA,OEE1B,MAAME,GAAuEvE,IAAMC,MAAK,EAAEuE,kBAElF,sBAAMP,OAAQO,EAAclE,UAAWmE,IAAGC,OAA1C,SACKf,GAAY,GAAI,SAAUJ,QAAOoB,EAAW,GAAI,CAACP,SAO/CQ,OAFWC,aAA+B,CAACC,KAAM,cAAtCD,CAAqDN,ICqChEQ,OApC4B/E,IAAMC,MAAK,EAAE+E,aAAYC,gBAAeC,UAASC,iBACxF,MAAOC,EAAUC,GAAeC,oBAAS,GAanCC,EAAgB,CACdb,OAAQM,GAEhB,OAAIG,EACO,cAAC,EAAD,IAGP,iCACMC,GACF,qBAAK9E,UAAWmE,IAAGC,OAAnB,SACQ,sBAAMc,cAAeN,EAtBZ,KACrBG,GAAY,SAqBkDV,EAAlD,SACKK,IAAeE,EAAU,iCAAmC,oBAIxEE,GACD,cAAC,GAAD,CAAmBK,SAtBCC,IAFxBL,GAAY,GAITK,EAAShB,SAAWM,GACnBC,EAAcS,EAAShB,SAmB0Ba,cAAeA,UCgB7DI,OAFqBd,aAAkC,CAACC,KAAM,0BAAzCD,EAjD4D,EAAEe,UAASpB,kBAEnG,sBAAMiB,SAAUjB,EAAhB,SACI,sBAAKlE,UAAWmE,IAAGoB,gBAAnB,UACI,qBAAKvF,UAAWmE,IAAGqB,yBAAnB,SACQ,+BACI,8EAGZ,qBAAKxF,UAAWmE,IAAGqB,yBAAnB,SACKnC,GAA6B,YAAa,WAAYJ,MAE3D,qBAAKjD,UAAWmE,IAAGqB,yBAAnB,SACKnC,GAA6B,mBAAoB,UAAWJ,MAEjE,qBAAKjD,UAAWmE,IAAGsB,UAAnB,SACI,+BACKpC,GAA6B,GAAI,iBAAkBJ,GAAO,WAAY,qBAAsB,GAAIkB,IAAGsB,eAG5G,qBAAKzF,UAAWmE,IAAGqB,yBAAnB,SACI,+BACKnC,GAA6B,0BAA2B,4BAA6BD,QAG9F,gCACI,qBAAKpD,UAAWmE,IAAGqB,yBAAnB,SACI,+BACI,mDAGR,8BACKE,OAAOC,KAAKL,EAAQM,UAAUC,KAAIC,GACxB,qBAAK9F,UAAWmE,IAAGqB,yBAAnB,SACH,4BAAInC,GAAYyC,EAAM,YAAWA,IAAO7C,OADa6C,UAMrE,8BACI,cAAC,IAAD,CAAQrH,KAAM,UAAWsH,SAAU,SAAUC,KAAM,QAAnD,6BC9Cb,MAAMC,GAAa,CACtBC,WAAW7H,GACAvB,EAASU,IAAkB,WAAUa,KAEhD8H,cAAc9H,GACHvB,EAASU,IAAa,kBAAiBa,KAElD+H,iBAAiBhC,GACNtH,EAASuJ,IAAyB,iBAAiB,CAACjC,OAAQA,IAEvEkC,yBAAyBhB,GACdxI,EAASuJ,IAAwB,UAAWf,GAEvDiB,mBAAmBC,GACf,MAAMpB,EAAW,IAAIqB,SAErB,OADArB,EAASsB,OAAO,QAASF,GAClB1J,EAASuJ,IAA6C,gBAAiBjB,EAAU,CAACjI,QAAS,CAAC,eAAgB,2BCd9GwJ,GAAW,CACpBC,SAAQ,CAACC,EAAeC,EAAcC,EAAO,GAAIC,EAAyB,OAC/DlK,EAASU,IAAwB,eAAcqJ,UAAcC,UAAaC,YAAeC,KAEpGC,OAAO5I,GACIvB,EAASgB,KAA0B,UAASO,IAAM,IAE7D6I,SAAS7I,GACEvB,EAASkB,OAA4B,UAASK,KAEzD8I,SAAS9I,GACEvB,EAASU,IAAc,UAASa,KAAM7B,MAAK4K,GAAOA,EAAI1I,QCf/D2I,GAAmB,2BACnBC,GAAkB,0BAClBC,GAAkB,0BAClBC,GAAgB,wBAChBC,GAAmB,2BAEnBrJ,GAAe,CACjBkH,QAAS,KACTlB,OAAQ,GACRS,YAAY,EACZ6C,WAAY,MAmCHlJ,GAAU,CACnBmJ,cAAgBrC,IAAD,CAAmC7G,KAAM4I,GAAkB/B,YAC1Ea,cAAgB/B,IAAD,CAAsB3F,KAAM6I,GAAiBlD,WAC5DwD,cAAgB/C,IAAD,CAA2BpG,KAAM8I,GAAiB1C,eACjEgD,YAAcC,IAAD,CAAiCrJ,KAAM+I,GAAeM,WACnEC,eAAiBL,IAAD,CAAkCjJ,KAAMgJ,GAAkBO,QAAS,CAACN,iBAG3EO,GAAkB5J,GACpBO,UACHG,EAASP,GAAQoJ,eAAc,IAC/B,MAAM/I,QAAiBoH,GAAWC,WAAW7H,GAC7CU,EAASP,GAAQmJ,cAAc9I,EAASH,OACxCK,EAASP,GAAQoJ,eAAc,KAkC1BM,GAAuBJ,GACzBlJ,UACH,MAAMC,QAAiBoH,GAAWM,mBAAmBuB,GACrB,IAA7BjJ,EAASH,KAAKI,YACbC,EAASP,GAAQqJ,YAAYhJ,EAASH,KAAKA,KAAKoJ,UAgB7CK,OAnGQ,CAAC5I,EAAQnB,GAAcoB,KAC1C,OAAOA,EAAOf,MACV,KAAK4I,GACD,MAAO,IACA9H,EACH+F,QAAS9F,EAAO8F,SAExB,KAAKgC,GACD,MAAO,IACA/H,EACH6E,OAAQ5E,EAAO4E,QAEvB,KAAKmD,GACD,MAAO,IACAhI,EACHsF,WAAYrF,EAAOqF,YAE3B,KAAK2C,GACD,MAAO,IACAjI,EACH+F,QAAS,IAAI/F,EAAM+F,QAASwC,OAAQtI,EAAOsI,SAEnD,KAAKL,GACD,MAAO,IACAlI,EACHmI,WAAYlI,EAAOwI,QAAQN,YAEnC,QACI,OAAOnI,IC3BJ6I,OAdU1I,IAAMC,MAAK,KAChC,MAAMZ,EAAWsJ,cAMjB,OACI,qBAAKrI,UAAWmE,IAAGmE,aAAnB,SACI,uBAAO7J,KAAK,OAAO8J,SAPAC,IAAsC,IAAD,GAC5D,UAAIA,EAAEC,OAAOC,aAAb,aAAI,EAAgB1E,SAChBjF,EAASmJ,GAAoBM,EAAEC,OAAOC,MAAM,aCPjD,MAAMC,GAAoBpJ,GACtBA,EAAMqJ,UAAUC,MAGdC,GAAevJ,GACjBA,EAAMqJ,UAAUG,SAGdC,GAA8BzJ,GAChCA,EAAMqJ,UAAUK,gBAGdC,GAAkB3J,GACpBA,EAAMqJ,UAAUO,YAGdC,GAAiB7J,GACnBA,EAAMqJ,UAAU/D,WAGdwE,GAA0B9J,GAC5BA,EAAMqJ,UAAUU,oBAGdC,GAAoBhK,GACtBA,EAAMqJ,UAAUY,OCpBrBC,GAAY,kBACZC,GAAwB,8BACxBC,GAAuB,6BACvBC,GAAmB,wBACnBC,GAAa,kBACbC,GAAwB,6BACxBC,GAAe,oBAEf3L,GAAe,CACjByK,MAAO,GACPE,SAAU,EACVE,gBAAiB,EACjBE,YAAa,EACbtE,YAAY,EACZyE,oBAAqB,GACrBE,OAAQ,CACJzC,KAAM,GACNC,OAAQ,OAoDHxI,GACO,CAAC2K,EAAc,KAAf,CAAuB1K,KAAMmL,GAAkBT,gBADtD3K,GAEKqK,IAAD,CAA8BpK,KAAMgL,GAAWZ,UAFnDrK,GAGKqG,IAAD,CAA2BpG,KAAMsL,GAAclF,eAHnDrG,GAIGgL,IAAD,CAA0B/K,KAAMoL,GAAY7B,QAASwB,IAJvDhL,GAKgB,CAACqG,EAAqBxG,KAAtB,CAAuCI,KAAMqL,GAAuBjF,aAAYxG,OALhGG,GAMYwL,IAAD,CAA0BvL,KAAMiL,GAAuBM,eANlExL,GAOkB,CAACyL,EAAmB5L,KAApB,CAAqCI,KAAMkL,GAAsBM,WAAU5L,OAI7FuI,GAAW,CAACmC,EAAkBjC,EAAc0C,IAC9C5K,UACHG,EAASP,IAAoB,IAC7BO,EAASP,GAAkBgL,IAC3BzK,EAASP,GAAuBsI,IAChC,MAAMjI,QAAiB8H,GAASC,SAASmC,EAAUjC,EAAM0C,EAAOzC,KAAMyC,EAAOxC,SACvE,MAACkD,EAAD,WAAQC,GAAetL,EAASH,KACtCK,EAASP,GAAoB0L,IAC7BnL,EAASP,GAA2B2L,IACpCpL,EAASP,IAAoB,KAIxB4L,GAAqBxL,MAAOyL,EAAsBhM,EAAYiM,EAAuEC,EAA+DxL,KACzMA,EAASP,IAAgC,EAAMH,IAEd,WADViM,EAAUjM,IACpBK,KAAKI,YACdC,EAASwL,EAAcF,EAAahM,IAExCU,EAASP,IAAgC,EAAOH,KAG3CmM,GAAcnM,GAChBO,UACH,MAAM0L,EAAY3D,GAASM,OAAOwD,KAAK9D,IAEjC4D,EAAgB/L,SAChB4L,IAFc,EAEkB/L,EAAIiM,EAAWC,EAAexL,IAI/D2L,GAAgBrM,GAClBO,UACH,MAAM0L,EAAY3D,GAASO,SAASuD,KAAK9D,IAEnC4D,EAAgB/L,SAChB4L,IAFc,EAEkB/L,EAAIiM,EAAWC,EAAexL,IAS7D4L,OAxGM,CAACpL,EAAQnB,GAAcoB,KACxC,OAAOA,EAAOf,MACV,KAAKmL,GACD,MAAO,IACArK,EACH4J,YAAa3J,EAAO2J,aAE5B,KAAKO,GACD,MAAO,IACAnK,EACH0J,gBAAiBzJ,EAAOwK,YAEhC,KAAKP,GACD,MAAO,IACAlK,EACHsJ,MAAO,IAAIrJ,EAAOqJ,QAE1B,KAAKkB,GACD,MAAO,IACAxK,EACHsF,WAAYrF,EAAOqF,YAE3B,KAAKgF,GACD,MAAO,IACAtK,EACHiK,OAAQhK,EAAOwI,SAEvB,KAAK2B,GACD,MAAO,IACApK,EACHsJ,MAAOtJ,EAAMsJ,MAAMhD,KAAI+E,GAChBA,EAAEvM,KAAOmB,EAAOnB,GACR,IAAIuM,EAAGX,SAAUzK,EAAOyK,UAE5BW,KAGnB,KAAKd,GACD,MAAO,IACAvK,EACH+J,oBAAqB9J,EAAOqF,WAAa,IAAItF,EAAM+J,oBAAqB9J,EAAOnB,IAC7EkB,EAAM+J,oBAAoBE,QAAOnL,GAAMA,IAAOmB,EAAOnB,MAE/D,QACI,OAAOkB,ICtEZ,MAAM2G,GAAc3G,GAChBA,EAAMsL,YAAYvF,QAGhBwF,GAAavL,GACfA,EAAMsL,YAAYzG,OAGhB2G,GAAwBxL,GAC1BA,EAAMsL,YAAYhG,WAGhBmG,GAAiBzL,GACnBA,EAAMsL,YAAYnD,WCfhBuD,GAAuB1H,GACC,MAA1BA,EAAKA,EAAKS,OAAS,GC6BxBkH,GAAmCxL,IAAMC,MAAK,EAAE2F,UAASZ,aAAYC,gBAAeC,UAASC,aAAYsG,2BAA2B,IAAD,EACrI,MAAOC,EAAiBC,GAAsBrG,oBAAS,GACjD0C,EAAa4D,YAAYN,IACzB1B,EAAsBgC,YAAYjC,IAClCtK,EAAWsJ,cAEjBkD,qBAAU,IACC,KACHxM,EAASP,GAAQmJ,cAAc,OAC/B5I,EAASP,GAAQuJ,eAAe,SAErC,IAEHwD,qBAAU,KN+DiBlN,MM9DvBU,GN8DuBV,EM9DCiH,EAAQkG,ON+D7B5M,UACH,MAAMC,QAAiB8H,GAASQ,SAAS9I,GACzCU,EAASP,GAAQuJ,eAAelJ,SMhEjC,CAACyG,EAAQkG,SAqBZ,OAAI3G,GAA6B,OAAf6C,EACP,cAAC,EAAD,IAGP,sBAAK1H,UAAWmE,IAAGsH,qBAAnB,UACI,sBAAKzL,UAAWmE,IAAGqC,MAAnB,UACI,qBAAKnG,KAAY,OAAPiF,QAAO,IAAPA,GAAA,UAAAA,EAASwC,cAAT,eAAiB4D,SAAUT,GAAoB3F,EAAQqG,UAAYC,GAAYC,GAAUvL,IAAI,KACtGsE,IAAYwG,EACb,8BACI,qBAAKpL,UAAWmE,IAAG2H,wBAAnB,SACI,cAAC,IAAD,CAAQ9L,UAAWmE,IAAG2H,wBAAyBrN,KAAM,UAAWiC,QAnB7D,KACnB2K,GAAmB,IAkBH,2BAKFzG,EACF,cAAC,GAAD,IACE8C,EACU,cAAC,IAAD,CAAQ1H,UAAWmE,IAAG2H,wBAAyBrN,KAAM,UAAWsN,SAAUzC,EAAoB0C,MAAK3N,GAAMA,IAAOiH,EAAQkG,SAAS9K,QAAS,KAAMwG,OAhC1JsE,EAgCmKlG,EAAQkG,OA/BzLzM,EAAS2L,GAAac,SACtBzM,EAASP,GAAQuJ,gBAAe,IAFlByD,OAgCU,uBAGA9D,IAAe9C,GAC3B,cAAC,IAAD,CAAQ5E,UAAWmE,IAAG2H,wBAAyBrN,KAAM,UAAWsN,SAAUzC,EAAoB0C,MAAK3N,GAAMA,IAAOiH,EAAQkG,SAAS9K,QAAS,KAAMuG,OAzChJuE,EAyCuJlG,EAAQkG,OAxC3KzM,EAASyL,GAAWgB,SACpBzM,EAASP,GAAQuJ,gBAAe,IAFpByD,OAyCA,uBAKNJ,EAGI,cAAC,GAAD,CAA6B9F,QAASA,EAASL,cAAeK,EAASH,SAnCpEvG,gBACPuM,EAAqB/F,GAC3BiG,GAAmB,MA+BX,cAACY,GAAD,CAAoB3G,QAASA,EAASZ,WAAYA,EAAYC,cAAeA,EACzDC,QAASA,EAASC,WAAYA,UAe5DoH,GAAuDvM,IAAMC,MAAK,EAAE2F,UAASZ,aAAYC,gBAAeC,UAASC,iBACnH,MAAMqH,EAAcC,QAAQzG,OAAO0G,OAAO9G,EAAQM,UAAUC,KAAIwG,GAAKA,IAAG7C,QAAO8C,GAAKA,IAAG,IACvF,OACI,sBAAKtM,UAAWmE,IAAGoI,YAAnB,UACI,qBAAKvM,UAAWmE,IAAGZ,KAAnB,SACI,sCACK+B,QADL,IACKA,OADL,EACKA,EAASqG,aAGlB,cAAC,GAAD,CAAejH,WAAYA,EAAYC,cAAeA,EAAeC,QAASA,EAASC,WAAYA,KAC3F,OAAPS,QAAO,IAAPA,OAAA,EAAAA,EAASkH,UACV,qBAAKxM,UAAWmE,IAAGsI,qBAAnB,SACI,iCACI,2CADJ,WACuBnH,QADvB,IACuBA,OADvB,EACuBA,EAASkH,aAIpC,gCACI,qBAAKxM,UAAWmE,IAAGsI,qBAAnB,SACI,iCACI,mDADJ,KACsC,OAAPnH,QAAO,IAAPA,OAAA,EAAAA,EAASoH,gBAAiB,MAAQ,WAG7D,OAAPpH,QAAO,IAAPA,OAAA,EAAAA,EAASoH,iBACV,qBAAK1M,UAAWmE,IAAGsI,qBAAnB,SACI,iCACI,0CADJ,YACuBnH,QADvB,IACuBA,OADvB,EACuBA,EAASqH,kCAKvCT,GACD,gCACI,qBAAKlM,UAAWmE,IAAGyI,QAAnB,SACI,+BACI,gDAGR,8BACKlH,OAAOC,KAAKL,EAAQM,UAAUC,KAAKC,GACzB,cAAC+G,GAAD,CAAoBC,WAAYhH,EAAKiH,aAAczH,EAAQM,SAASE,IAArDA,gBAaxC+G,GAAuCnN,IAAMC,MAAK,EAAEmN,aAAYC,kBAAiB1L,KAE/E,wBAASA,EAAT,SACK0L,GACG,qBAAK/M,UAAWmE,IAAGsI,qBAAnB,SAAyC,oBAAGzM,UAAWmE,IAAGyB,SAAjB,UAA2B,8BAAIkH,EAAJ,OAA3B,IAAiDC,WAK3F7B,U,qBC5IA8B,OAbsBtN,QAAW,EAAE0E,SAAQkB,UAAST,aAAYF,gBAAeC,UAASuG,uBAAsBjD,yBACtH5C,IAAYA,EACJ,cAAC,EAAD,IAGP,qBAAKtF,UAAWoC,KAAE6K,iBAAlB,SACI,cAAC,GAAD,CAAa3H,QAASA,EAASZ,WAAYN,EAAQO,cAAeA,EACrDE,WAAYA,EAAYD,QAASA,EAASuG,qBAAsBA,EAChEjD,oBAAqBA,Q,SCzBvC,MAAMgF,GAAY3N,GACdA,EAAMqD,MAAMA,MCDjBuK,GAAY,kBAEZ/O,GAAe,CACjBwE,MAAO,MAeEpE,GACEoE,IAAD,CAA4BnE,KAAM0O,GAAWnF,QAAS,CAACpF,WAGxDwK,GAAYxK,GACdhE,UACHG,EAASP,GAAiBoE,KAQnByK,OA1BM,CAAC9N,EAAQnB,GAAcoB,KACxC,OAAOA,EAAOf,MACV,KAAK0O,GACD,MAAO,IACA5N,EACHqD,MAAOpD,EAAOwI,QAAQpF,OAE9B,QACI,OAAOrD,I,UCaJ+N,OAvBf,SAAyBpM,GACrB,OAAOxB,IAAMC,MAAM0B,IACf,MAAMuB,EAAQ0I,YAAY4B,IACpBnO,EAAWsJ,cAQjB,OAPAkD,qBAAU,IACC,KACA3I,GACC7D,EAASqO,GAAS,SAG3B,CAACxK,IACAA,EACO,mCAAE,cAAC,KAAD,CACL5D,QAAQ,QACRuN,YAAa3J,EACbnE,KAAK,QACL8O,UAAQ,MAGR,cAACrM,EAAD,IAAeG,QCc/B,MAAMmM,WAAyB9N,IAAM+N,cACjCC,qBACI,IAAIlC,EAASpK,KAAKC,MAAMsM,MAAMC,OAAOC,OACjCrC,IACAA,EAASpK,KAAKC,MAAMhD,GAChBmN,IAKRpK,KAAKC,MAAM4G,eAAeuD,GAC1BpK,KAAKC,MAAMyM,qBAAqBtC,IALxBpK,KAAKC,MAAM0M,QAAQC,KAAK,UAOpC7M,oBACIC,KAAKsM,qBAETO,mBAAmBC,EAAsBC,GACjCD,EAAUP,MAAMC,OAAOC,SAAWzM,KAAKC,MAAMsM,MAAMC,OAAOC,QACtDK,EAAU9J,SAAWhD,KAAKC,MAAM+C,QACpChD,KAAKsM,qBAGbpM,SACI,OAAIF,KAAKC,MAAMiE,SAAWlE,KAAKC,MAAMwD,WAC1B,cAAC,EAAD,IAEJ,cAAC,GAAD,IAAazD,KAAKC,MAAOuD,SAAUxD,KAAKC,MAAMsM,MAAMC,OAAOC,UAa3DO,oBACX7M,aAVqBhC,IACd,CACHlB,GAAIyC,EAAMvB,GACV+F,QAASY,GAAW3G,GACpB6E,OAAQ0G,GAAUvL,GAClBsF,WAAYkG,GAAqBxL,MAKZ,CAAC0I,kBAAgB6F,qBXZTzP,GAC1BO,UACHG,EAASP,GAAQoJ,eAAc,IAC/B,MAAM/I,QAAiBoH,GAAWE,cAAc9H,GAChDU,EAASP,GAAQ2H,cAActH,EAASH,OACxCK,EAASP,GAAQoJ,eAAc,KWO6BjD,cXHtCP,GACnBxF,UACHG,EAASP,GAAQoJ,eAAc,IAEC,WADT3B,GAAWG,iBAAiBhC,IACvC1F,KAAKI,aACbC,EAASP,GAAQ2H,cAAc/B,IAC/BrF,EAASP,GAAQoJ,eAAc,MWFnCuD,qBXO6B7F,GAC1B1G,MAAOG,EAAUsP,KACpB,MAAMhQ,EAAKgQ,IAAW/P,KAAKD,GAEK,WADT4H,GAAWK,yBAAyBhB,IAC/C5G,KAAKI,kBACPC,EAASkJ,GAAe5J,KWZZ6J,uBAAqB1J,aAC/C8O,GACAgB,IAJWF,CAKdZ,I,qBC/Bce,OAnCmB7O,QAAW,EAAE8O,WAC3C,MAAMlF,EAAsBgC,YAAYjC,IAClCtK,EAAWsJ,cAQjB,OACI,sBAAKrI,UAAW4K,KAAE6D,UAAlB,UACI,cAAC,IAAD,CAAS9N,GAAK,YAAW6N,EAAKnQ,KAA9B,SACI,qBAAKgC,IAAKmO,EAAK1G,OAAO4D,QAAUT,GAAoBuD,EAAKjL,MAAQqI,GAAYC,GAAUvL,IAAI,GAAGN,UAAW4K,KAAE8D,iBAE/G,8BACKF,EAAKjL,OAEV,8BACKiL,EAAKpK,SAEToK,EAAKvE,UACN,cAAC,IAAD,CAAQjE,KAAM,QAASvH,KAAM,UAAWsN,SAAUzC,EAAoB0C,MAAK3N,GAAMA,IAAOmQ,EAAKnQ,KAAKqC,QAAS,KAAMwG,OAfvGsE,EAegHgD,EAAKnQ,QAdnIU,EAAS2L,GAAac,IADRA,OAeV,uBAIEgD,EAAKvE,UACH,cAAC,IAAD,CAAQjE,KAAM,QAASvH,KAAM,UAAWsN,SAAUzC,EAAoB0C,MAAK3N,GAAMA,IAAOmQ,EAAKnQ,KAAKqC,QAAS,KAAMuG,OAxB7GuE,EAwBoHgD,EAAKnQ,QAvBrIU,EAASyL,GAAWgB,IADRA,OAwBJ,0B,oBC5CD,OAA0B,uCCA1B,OAA0B,wCCA1B,OAA0B,6CCA1B,OAA0B,8C,6BCsE1BmD,OAjD8BjP,IAAMC,MAAK,EAAEiP,sBACtD,MAAMb,EAAUc,cACVrF,EAAS8B,YAAY/B,IACrBuF,IAAaf,EAAQgB,SAASC,OAAOhL,QAAuD,gBAA7C+J,EAAQgB,SAASC,OAAOC,UAAU,EAAG,IAQpFC,EAAc,KAKhBN,EAJ2B,CACvB7H,KAAM,GACNC,OAAQ,QAIhB,OACI,qBAAKhH,UAAW4K,KAAEuE,WAAlB,SACI,cAAC,KAAD,CACIC,oBAAkB,EAClBnK,cAAe,CAAE8B,KAAMyC,EAAOzC,KAAMC,OAAQqI,OAAO7F,EAAOxC,SAC1D7B,SAnBG,CAACiH,GAAmBkD,oBAC/B,MAAM9F,EAAqB,CACvBzC,KAAMqF,EAAOrF,KACbC,OAA0B,SAAlBoF,EAAOpF,OAAoB,KAAyB,SAAlBoF,EAAOpF,QAErD4H,EAAgBpF,IAWZ,SAKK,EAAG+F,kBAEI,eAAC,KAAD,WACI,cAAC,KAAD,CAAOjM,YAAY,qBAAqB7E,KAAK,OAAO8E,KAAK,SACzD,eAAC,KAAD,CAAOiM,GAAG,SAASjM,KAAK,SAAxB,UACI,wBAAQf,MAAM,OAAd,iBACA,wBAAQA,MAAM,OAAd,2BACA,wBAAQA,MAAM,QAAd,gCAEA,uBAAMxC,UAAW8O,EAAWlE,KAAE6E,mBAAqB,GAAnD,UACA,cAAC,IAAD,CAAQzP,UAAW4K,KAAE8E,OAAQjR,KAAK,UAAUsH,SAAU,SAAU4J,KAAM,cAACC,GAAA,EAAD,IAAmB7D,SAAUwD,EAAcM,MAAOf,EAAW,SAAW,QAA9I,UACMA,GAAY,WAErBA,GACG,cAAC,IAAD,CAAQ9O,UAAW4K,KAAE8E,OAAQjR,KAAK,UAAUiC,QAASwO,EAAanJ,SAAU,SAAU4J,KAAM,cAACG,GAAA,EAAD,IAAyBD,MAAO,WAL5H,mB,UCuDjBE,OApFoBrQ,IAAMC,MAAK,KAC1C,MAAMkJ,EAAQyC,YAAY3C,IACpBQ,EAAcmC,YAAYpC,IAC1BH,EAAWuC,YAAYxC,IACvBG,EAAkBqC,YAAYtC,IAC9BnE,EAAayG,YAAYlC,IACzBI,EAAS8B,YAAY/B,IACrBxK,EAAWsJ,cACX0F,EAAUc,cAChBtD,qBAAU,KACN,MAAMyE,EAAyB,GAC5BxG,EAAOzC,OAAMiJ,EAAMjJ,KAAOyC,EAAOzC,MACf,OAAlByC,EAAOxC,SAAiBgJ,EAAMhJ,OAASqI,OAAO7F,EAAOxC,SACrC,IAAhBmC,IAAmB6G,EAAM7G,YAAckG,OAAOlG,IACjD4E,EAAQC,KAAK,CACTjO,SAAU,SACViP,OAAQiB,aAAsBD,OAEnC,CAACxG,EAAQL,IAEZoC,qBAAU,KACN,MAAM2E,EAAcD,SAAkBlC,EAAQgB,SAASC,OAAOC,UAAU,IACxE,IAAIkB,EAAahH,EACbiH,EAAe5G,EAChB0G,EAAYnJ,OAAMqJ,EAAe,IAAIA,EAAcrJ,KAAMmJ,EAAYnJ,OACrEmJ,EAAYlJ,SAAQoJ,EAAe,IAAIA,EAAcpJ,OAA+B,SAAvBkJ,EAAYlJ,OAAoB,KAA8B,SAAvBkJ,EAAYlJ,SAChHkJ,EAAY/G,cAAagH,EAAaE,OAAOH,EAAY/G,cAC5DpK,EAAS6H,GAASmC,EAAUoH,EAAYC,MAC1C,IAEF,MAAME,EAAmBxJ,IACrB/H,EAAS6H,GAASmC,EAAUjC,EAAM0C,KAOtC,IAAIX,GAAShE,EACT,OAAO,cAAC,EAAD,IAEX,MAAM0L,EAAkBC,KAAKC,KAAKxH,EAAgBF,GAClD,OACI,qBAAK/I,UAAW4K,KAAE6D,UAAlB,SACI,sBAAKzO,UAAW4K,KAAE8F,aAAlB,UACI,sBAAK1Q,UAAW4K,KAAE+F,kBAAlB,UACI,cAAC,GAAD,CAAiB/B,gBAZRpF,IACrBzK,EAAS6H,GAASmC,EAAU,EAAGS,OAYnB,qBAAKxJ,UAAW4K,KAAEzB,YAAlB,SAA+B,+BAAM,2CAAcA,YAEvD,sBAAKnJ,UAAW4K,KAAEgG,oBAAlB,UACCzH,EAAc,EACX,sBAAKnJ,UAAW4K,KAAEiG,gBAAlB,UACI,qBAAKxQ,IAAKyQ,GAAkBxQ,IAAI,GAAGN,UAAW4K,KAAEmG,YAAarQ,QAAS,IAAM4P,EAAgBnH,EAAYA,KACxG,qBAAK9I,IAAK2Q,GAAY1Q,IAAI,GAAGN,UAAW4K,KAAEmG,YAAarQ,QAAS,IAAM4P,EAAgBnH,EAAc,QAGxG,qBAAKnJ,UAAW4K,KAAEiG,kBAGtB,uBAAM7Q,UAAW4K,KAAEqG,UAAnB,UACCpI,EAAM7E,OACH6E,EAAMhD,KAAI+E,GAAK,cAAC,GAAD,CAAiB4D,KAAM5D,GAAZA,EAAEvM,MAC1B,oDAEDwK,EAAM7E,OAAS+E,GAChB,qBAAK/I,UAAW4K,KAAEsG,iBAEnBrI,EAAM7E,QAAUmF,IAAgBoH,EAC/B,sBAAKvQ,UAAW4K,KAAEiG,gBAAlB,UACI,qBAAKxQ,IAAK8Q,GAAa7Q,IAAI,GAAGN,UAAW4K,KAAEmG,YACtCrQ,QAAS,IAAM4P,EAAgBnH,EAAc,KAClD,qBAAK9I,IAAK+Q,GAAmB9Q,IAAI,GAAGN,UAAW4K,KAAEmG,YAC5CrQ,QAAS,IAAM4P,EAAgBC,QAGxC,qBAAKvQ,UAAW4K,KAAEiG,6BCvFtC,MAAMQ,GAAmB9R,IACd,CACHjB,KAAMiB,EAAMjB,KAAKA,OAcVgT,OAVf,SAAiCpQ,GAO7B,OAAOK,YAAwE8P,GAAxE9P,EANP,SAA6BF,GACzB,MAAM,KAAC/C,KAAS6E,GAAa9B,EAC7B,OAAI/C,EAAa,cAAC4C,EAAD,IAAeiC,IACzB,cAAC,IAAD,CAAUxC,GAAI,eClB7B,MAAM4Q,GAA2B7R,IAAMC,MAAM0B,GAEjC,cAAC,GAAD,MAIG+M,oBAA6Bd,GAAWgE,GAAxClD,CAA2DmD,I,yCCE1E,MAAMC,GAAmF9R,IAAMC,MAAK,EAAEuE,eAActB,QAAOrE,gBAEnH,uBAAM4G,SAAUjB,EAAclE,UAAWyR,KAAGC,mBAA5C,UACI,qBAAK1R,UAAW2R,KAAEC,WAAlB,mBACA,gCACKvO,GAAY,QAAS,QAASJ,QAAOoB,OAAWA,EAAW,CAAC9B,KAC5Dc,GAAY,WAAY,WAAYJ,GAAO,gBAAYoB,EAAW,CAAC9B,KACnEc,QAAYgB,EAAW,aAAc,QAAS,WAAY,kBAE7D9F,GACF,qBAAK8B,IAAK9B,EAAY+B,IAAI,KAExB/B,GACE8E,GAAY,eAAgB,UAAWJ,QAAOoB,OAAWA,EAAW,CAAC9B,KAEvEK,GACF,qBAAK5C,UAAW6R,KAAIC,iBAApB,SACKlP,IAGL,8BACI,cAAC,IAAD,CAAQnE,KAAM,UAAWsH,SAAU,SAAnC,2BAUDgM,OAFQxN,aAAwC,CAACC,KAAM,SAA/CD,CAAyDiN,ICLjEQ,OAjBoBtS,IAAMC,MAAK,EAAErB,OAAM2T,YAAW1T,gBAK1DD,EACQ,cAAC,IAAD,CAAUqC,GAAI,aAGrB,qBAAKX,UAAW2R,KAAElR,eAAlB,SACI,qBAAKT,UAAW2R,KAAEO,aAAlB,SACA,cAAC,GAAD,CAAW3T,WAAYA,EAAY4G,SAVzBC,IACd,MAAM,MAAC1H,EAAD,SAAQC,EAAR,WAAkBC,EAAlB,QAA8BC,GAAWuH,EAC/C6M,EAAUvU,EAAOC,EAAUC,EAAYC,YCN/C,MAAMsU,WAAuBzS,IAAMwB,UAC/BI,SACI,OACI,cAAC,GAAD,IAAWF,KAAKC,SAYbE,oBAPUhC,IACd,CACHjB,KAAMf,EAAQgC,GACdhB,WAAYyC,EAAczB,MAI+E,CAAC0S,UzCwBzF,CAACvU,EAAeC,EAAkBC,EAAqBC,IACrEe,UACH,MAAMC,QAAiBvB,EAAQG,MAAMC,EAAOC,EAAUC,EAAYC,GAClE,GAAgC,IAA7BgB,EAASH,KAAKI,iBACPC,EAASJ,UACZ,GAAgC,KAA7BE,EAASH,KAAKI,iBACdC,EAASK,SACZ,CACH,MAAMJ,EAAUH,EAASH,KAAKO,SAAS,GAAKJ,EAASH,KAAKO,SAAS,GAAK,0BACxEF,EAASG,YAAW,QAAS,CAACC,OAAQH,OyCjC2EI,iBAA9GmC,CAA8H4Q,I,oBC9B7I,MAAMC,GAAkB,sBAElBhU,GAAe,CACjBiU,eAAe,GAeN7T,GACM,MAAQC,KAAM2T,KAclBE,OA3BI,CAAC/S,EAAQnB,GAAcoB,KACtC,OAAOA,EAAOf,MACV,KAAK2T,GACD,MAAO,IACA7S,EACH8S,eAAe,GAEvB,QACI,OAAO9S,ICjBnB,IAAIgT,GAeAC,GAAc,CACd,YAAe,GACf,UAAa,IAGjB,MAAMC,GAAkBjK,IACpB,IAAIkK,EAAcC,KAAKC,MAAMpK,EAAE9J,MAC/B8T,GAAW,YAAgBK,SAAQpR,GAAKA,EAAEiR,MAGxCI,GAAe,KACjBC,GAAsB,cACtBC,WAAWC,GAAe,MAGxBC,GAAc,KAChBH,GAAsB,UAGpBI,GAAe,KACjBJ,GAAsB,SACtBK,QAAQC,IAAI,qBAGVN,GAAyB3O,IAC3BoO,GAAW,UAAcK,SAAQpR,GAAKA,EAAE2C,MAGtCkP,GAAU,KAAO,IAAD,QAChB,QAAF,EAAAf,UAAA,SAAIgB,oBAAoB,QAAST,IAC/B,QAAF,EAAAP,UAAA,SAAIgB,oBAAoB,UAAWd,IACjC,QAAF,EAAAF,UAAA,SAAIgB,oBAAoB,OAAQL,IAC9B,QAAF,EAAAX,UAAA,SAAIgB,oBAAoB,QAASJ,KAG/BF,GAAgB,KACD,IAAD,EAAN,OAAPV,KACCe,KACE,QAAF,EAAAf,UAAA,SAAIiB,SAERjB,GAAK,IAAIkB,UAAU,gEACnBV,GAAsB,cACtBR,GAAGmB,iBAAiB,OAAQR,IAC5BX,GAAGmB,iBAAiB,QAASZ,IAC7BP,GAAGmB,iBAAiB,UAAWjB,IAC/BF,GAAGmB,iBAAiB,QAASP,KAGpBQ,GAAU,CACnBC,QACIX,MAEJY,OAAQ,IAAD,EACHrB,GAAW,YAAkB,GAC7BA,GAAW,UAAgB,GAC3Bc,KACE,QAAF,EAAAf,UAAA,SAAIiB,SAERM,UAAUC,EAA4BC,GAElCxB,GAAYuB,GAAO/F,KAAKgG,IAE5BC,YAAYF,EAA4BC,GAEpCxB,GAAYuB,GAASvB,GAAYuB,GAAOvK,QAAO/H,GAAKA,IAAMuS,KAE9DE,YAAYlV,GAAkB,IAAD,EACvB,QAAF,EAAAuT,UAAA,SAAI4B,KAAKnV,K,cClFV,SAASoV,GAAe7U,EAAYC,GACvC,QAASD,EAAM8U,OAAS7U,EAAO6U,QAAU9U,EAAM8U,OAAS7U,EAAO6U,QCKnE,MAAMC,GAAyB,8BACzBC,GAAa,kBAEbnW,GAAe,CACjBa,SAAU,GACVmF,OAAQ,IAkCC5F,GACUS,IAAD,CAAkCR,KAAM6V,GAAwBtM,QAAS,CAAC/I,cADnFT,GAEO4F,IAAD,CAA6B3F,KAAM8V,GAAYvM,QAAS,CAAC5D,YAG5E,IAAIoQ,GAAoE,KACxE,MAAMC,GAA4B1V,IACJ,OAAvByV,KACCA,GAAsBvV,IAClBF,EAASP,GAAyBS,MAGnCuV,IAEX,IAAIE,GAA8D,KAClE,MAAMC,GAA2B5V,IACJ,OAAtB2V,KACCA,GAAqBtQ,IACjBrF,EAASP,GAAsB4F,MAGhCsQ,IAoBEE,GAAqB5V,GACvBJ,UACH+U,GAAQO,YAAYlV,IASb6V,OAnFK,CAACtV,EAAQnB,GAAcoB,KACvC,OAAOA,EAAOf,MACV,KAAK6V,GACD,OAAK/U,EAAMN,SAASM,EAAMN,SAAS+E,OAAS,MAAQoQ,GAAe7U,EAAMN,SAAUO,EAAOwI,QAAQ/I,WAAcO,EAAOwI,QAAQ/I,SAAS+E,QAAU,IAC1IzE,EAAMN,SAASM,EAAMN,SAAS+E,OAAS,IAA0C,IAAnCxE,EAAOwI,QAAQ/I,SAAS+E,OACnE,IACAzE,EACHN,SAAU,IAAIM,EAAMN,YAAaO,EAAOwI,QAAQ/I,SAAS4G,KAAIiP,IAAC,IAASA,EAAGzW,GAAI0W,oBACzEvL,QAAO,CAACsL,EAAGE,EAAOC,IAAUD,GAASC,EAAMjR,OAAS,OAG5DzE,EAAMN,SAASM,EAAMN,SAAS+E,OAAS,KACnCoQ,GAAe7U,EAAMN,SAAUO,EAAOwI,QAAQ/I,WACpB,MAA1BM,EAAMN,SAAS+E,QAAqD,MAAnCxE,EAAOwI,QAAQ/I,SAAS+E,QAClDzE,EAAMN,SAASM,EAAMN,SAAS+E,OAAS,GAAGhF,UAAYQ,EAAOwI,QAAQ/I,SAASM,EAAMN,SAAS+E,QAAQhF,QAC1F,IACAO,EACHN,SAAU,IAAIM,EAAMN,YAAaO,EAAOwI,QAAQ/I,SAASiW,MAAM3V,EAAMN,SAAS+E,OAAS,GAAG6B,KAAIiP,IAAC,IAASA,EAAGzW,GAAI0W,qBAGhI,IAAIxV,EAAON,SAAUM,EAAMN,UACtC,KAAKsV,GACD,MAAO,IACAhV,EACH6E,OAAQ5E,EAAOwI,QAAQ5D,QAE/B,QACI,OAAO7E,IC/BnB,MAAM4V,GAAWC,aAAgB,CAC7B9W,KAAMgB,EACN+V,IAAK/C,GACL9N,KAAM8Q,KACN1M,UAAW+B,GACXE,YAAa1C,GACboN,KAAMV,GACNjS,MAAOyK,KAUImI,OAPDC,aAAYN,GAAUO,aAAgBC,OClB7C,MAAMC,GAAoBrW,GACtBA,EAAM8V,IAAIhD,c,wBCDd,MAAMwD,GAAetW,GACjBA,EAAMgW,KAAKtW,SAGT6L,GAAavL,GACfA,EAAMgW,KAAKnR,O,cCatB,MAAM0R,GAAOpW,IAAMC,MAAK,KACpB,MAAMZ,EAAWsJ,cAOjB,OANAkD,qBAAU,KACNxM,GJ+CGH,UACH+U,GAAQC,QACRD,GAAQG,UAAU,cAAeW,GAAyB1V,IAC1D4U,GAAQG,UAAU,YAAaa,GAAwB5V,OIjDhD,KACHA,GJqDDH,UACH+U,GAAQE,OACRF,GAAQM,YAAY,cAAeQ,GAAyB1V,IAC5D4U,GAAQM,YAAY,YAAaU,GAAwB5V,UItD1D,IAEC,sBAAKiB,UAAW+V,KAAER,KAAlB,UACI,cAACS,GAAD,IACA,cAACC,GAAD,UAKND,GAActW,IAAMC,MAAK,KAC3B,MAAMV,EAAWqM,YAAYuK,KACtBK,EAAcC,GAAmBnR,oBAAS,GAC3CoR,EAAiBC,iBAAuB,MACxCC,EAAiB,KAAO,IAAD,EACzB,UAAAF,EAAeG,eAAf,SAAwBC,eAAe,CAAEC,SAAU,YAiBvD,OAPAlL,qBAAU,KACN+K,OAEJ/K,qBAAU,KACN2K,GAAgBI,MACjB,CAACrX,EAAUiX,IAGV,sBAAKlW,UAAW+V,KAAEW,YAAaC,SAhBZnO,IACnB,MAAMoO,EAAUpO,EAAEqO,cACfrG,KAAKsG,IAAKF,EAAQG,aAAeH,EAAQI,UAAaJ,EAAQK,eAAiB,KAC7Ef,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWpC,WACMlX,EAAS+E,QAAU,cAAC,EAAD,IACpB/E,EAAS4G,KAAKiP,GAAuB,cAACoC,GAAD,CAAalY,QAAS8V,GAAQA,EAAEzW,MACtE,qBAAK8Y,IAAKf,UAKhBc,GAAsDxX,IAAMC,MAAK,EAAEX,aAEjE,gCACI,sBAAKgB,UAAW+V,KAAEqB,YAAlB,UACI,qBAAK/W,IAAKrB,EAAQwH,QAAUyE,GAAoBjM,EAAQqY,UAAYzL,GAAYC,GAAUvL,IAAI,GAAGN,UAAW+V,KAAErH,eAC9G,+BAAM,4BAAI1P,EAAQqY,gBAEtB,8BACI,+BAAOrY,EAAQA,YAEnB,4BAKNiX,GAAiBvW,IAAMC,MAAK,KAC9B,MAAOX,EAASsY,GAActS,mBAAS,IACjCZ,EAASkH,YAAYR,IACrB/L,EAAWsJ,cACXkP,EAAkC,eAAXnT,GAAsC,UAAXA,EA4BxD,OACI,sBAAKpE,UAAW+V,KAAEyB,eAAlB,UACI,qBAAKxX,UAAW+V,KAAE0B,UAAlB,SACI,cAACC,GAAA,EAAD,CAAUpU,YAAa,2EAA4Ed,MAAOxD,EAChGuJ,SA/BGC,IACQ,OAA1BA,EAAEqO,cAAcrU,OAEkB,MAA1BgG,EAAEqO,cAAcrU,OAG3B8U,EAAW9O,EAAEqO,cAAcrU,QA0BTmV,UAfInP,IACtB,IAAK+O,GAAyB/O,EAAEoP,UAAuB,UAAXpP,EAAEqP,KAAmB,CAC7D,IAAK7Y,EACD,OAEJwJ,EAAEsP,iBACF/Y,EAAS6V,GAAkB5V,IAC3BsY,EAAW,MASGS,KAAM,OAGpB,8BACI,cAAC,IAAD,CAAQtZ,KAAM,UAAWsN,SAAUwL,EAAsB7W,QA7B1C,KACvB,IAAI6W,EAAsB,CACtB,IAAIvY,EACA,OAEJD,EAAS6V,GAAkB5V,IAC3BsY,EAAW,MAuBP,0BAQDlJ,oBAA6Bd,GAAWgE,GAAxClD,CAA2D0H,I,OCrH3DkC,OAZYtY,IAAMC,MAAK,IAE9B,8BACI,cAAC,KAAD,CAAOX,QAAQ,QACRuN,YAAY,qBACZ9N,KAAK,QACL8O,UAAQ,QCmB3B,MAAM0K,WAAYxK,gBAA0B,eAAD,oBACvCyK,wBAA2BC,IACvB,GAAGA,EAAuB,CACtB/E,QAAQxQ,MAAMuV,GACd,MAAMvV,EAAQuV,EAAsBC,OAAOpZ,SAAWmZ,EAAsBC,OAAOvZ,SAASH,KAAKM,QACjGoC,KAAKC,MAAM+L,SAASxK,KAG5BzB,oBACIC,KAAKC,MAAMgX,iBACXC,OAAO5E,iBAAiB,qBAAsBtS,KAAK8W,yBAEvDK,uBACID,OAAO/E,oBAAoB,qBAAsBnS,KAAK8W,yBAE1D5W,SACI,OAAIF,KAAKC,MAAMgR,cAIX,sBAAKrS,UAAWwY,IAAEC,WAAlB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,sBAAMzY,UAAWwY,IAAEE,KAAnB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAM,SAAUrX,OAAQ,IAAM,cAAC,GAAD,MACrC,cAAC,IAAD,CAAOqX,KAAM,oBAAqBrX,OAAQ,IAAM,cAAC,GAAD,MAChD,cAAC,IAAD,CAAOqX,KAAM,SAAUrX,OAAQ,IAAM,cAAC,GAAD,MACrC,cAAC,IAAD,CAAOqX,KAAM,QAASrX,OAAQ,IAAM,cAAC,GAAD,MACpC,cAAC,IAAD,CAAOsX,OAAK,EAACD,KAAM,IAAKrX,OAAQ,IAAM,cAAC,IAAD,CAAUX,GAAI,aACpD,cAAC,IAAD,CAAOgY,KAAM,IAAKrX,OAAQ,IAAM,cAAC,GAAD,WAGxC,cAAC,EAAD,OAhBG,cAAC,EAAD,KA4BnB,IAAIuX,GAAezK,aACf7M,aAPqBhC,IACd,CACH8S,cAAeuD,GAAiBrW,MAKX,CAAC8Y,eTjDA,IACnBzZ,gBACGG,EAASJ,KACfI,EAASP,OS8C6B4O,cAC1CkB,IAFeF,CAEH6J,IAYDa,OAV0BpZ,IAAMC,MAAK,IAE5C,cAAC,IAAD,UACI,cAAC,IAAD,CAAU6V,MAAOA,GAAjB,SACI,cAACqD,GAAD,UC3EhBE,IAASzX,OACP,cAAC,GAAD,IACA0X,SAASC,eAAe,SAM1B5c,K,mBCbAF,EAAOC,QAAU,CAAC,gBAAkB,gCAAgC,SAAW,yBAAyB,KAAO,qBAAqB,YAAc,4BAA4B,UAAY,0BAA0B,eAAiB,+BAA+B,MAAQ,wB,mBCA5QD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,eAAiB,gCAAgC,KAAO,sBAAsB,OAAS,0B,mBCA5ID,EAAOC,QAAU,CAAC,KAAO,mBAAmB,YAAc,0BAA0B,YAAc,0BAA0B,aAAe,2BAA2B,eAAiB,6BAA6B,UAAY,0B,mBCAhOD,EAAOC,QAAU,CAAC,kBAAoB,wCAAwC,MAAQ,4BAA4B,eAAiB,qCAAqC,iBAAmB,uCAAuC,SAAW,iC,mBCA7OD,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,aAAe,4BAA4B,WAAa,6B","file":"static/js/main.1ca11624.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__3a01q\",\"photo\":\"ProfileInfo_photo__10dn2\",\"inputWrapper\":\"ProfileInfo_inputWrapper__18ESu\",\"description\":\"ProfileInfo_description__2tPzv\",\"name\":\"ProfileInfo_name__1toHp\",\"status\":\"ProfileInfo_status__2qqQF\",\"elementOfDescription\":\"ProfileInfo_elementOfDescription__24Cpv\",\"contact\":\"ProfileInfo_contact__g-nCp\",\"contacts\":\"ProfileInfo_contacts__1WWgw\",\"buttonUnderProfilePhoto\":\"ProfileInfo_buttonUnderProfilePhoto__3HD6c\",\"descriptionForm\":\"ProfileInfo_descriptionForm__1ZKr2\",\"elementOfDescriptionForm\":\"ProfileInfo_elementOfDescriptionForm__iYJUk\",\"searchJob\":\"ProfileInfo_searchJob__1-CsB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContent\":\"App_appContent__2dvhY\",\"main\":\"App_main__3bFf_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3vgN2\",\"flaticonRef\":\"Footer_flaticonRef__3Z4nc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"User_container__1llI1\",\"profilePhoto\":\"User_profilePhoto__HCx9u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderWrapper\":\"Preloader_preloaderWrapper__1HRyV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContainer\":\"Profile_profileContainer__3gPic\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginFormContainer\":\"LoginForm_loginFormContainer__2TfL0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Users_container__3Msvs\",\"buttonContainer\":\"Users_buttonContainer__1pImp\",\"usersWrapper\":\"Users_usersWrapper__dpw-n\",\"searchFormAndPage\":\"Users_searchFormAndPage__3JPeo\",\"usersListAndButtons\":\"Users_usersListAndButtons__26YUa\",\"usersList\":\"Users_usersList__2LnM-\",\"notAllUsers\":\"Users_notAllUsers__31TB1\",\"arrowButton\":\"Users_arrowButton__1Zwnr\",\"searchForm\":\"Users_searchForm__3qs1L\",\"button\":\"Users_button__1bKQe\",\"currentPage\":\"Users_currentPage__3LPNO\",\"searchButtonsInRow\":\"Users_searchButtonsInRow__2TIMW\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\nexport const instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"86dfe136-7be0-4b1e-b813-164c7f450a17\"\r\n    }\r\n})\r\n\r\nexport enum ServerResponseCode {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ServerResponseCaptcha {\r\n    Captcha = 10\r\n}\r\n\r\nexport type ServerResponseType<D = {}, RC = ServerResponseCode | ServerResponseCaptcha> = {\r\n    data: D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n}","import {instance, ServerResponseType} from \"./api\";\r\n\r\ntype AuthDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginDataType = {\r\n    userId: number\r\n}\r\n\r\ntype CaptchaResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const authAPI = {\r\n    getAuth() {\r\n        return instance.get<ServerResponseType<AuthDataType>>('auth/me')\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: string | null = null) {\r\n        return instance.post<ServerResponseType<LoginDataType>>('auth/login', {email, password, rememberMe, captcha})\r\n    },\r\n    logout() {\r\n        return instance.delete<ServerResponseType>('auth/login')\r\n    },\r\n    captcha() {\r\n        return instance.get<CaptchaResponseType>('security/get-captcha-url')\r\n    }\r\n}","import {stopSubmit} from \"redux-form\";\r\nimport {authAPI} from \"../api/authApi\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\r\n\r\nconst USER_AUTHENTICATION = 'auth/USER_AUTHENTICATION'\r\nconst LOGOUT = 'auth/LOGOUT'\r\nconst GET_CAPTCHA = 'auth/GET_CAPTCHA'\r\n\r\nconst initialState = {\r\n    id: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    auth: false,\r\n    captchaURL: null as null | string\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionTypes): AuthReducerInitialStateType => {\r\n    switch(action.type) {\r\n        case USER_AUTHENTICATION:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case LOGOUT:\r\n            return {\r\n                ...state,\r\n                auth: false\r\n            }\r\n        case GET_CAPTCHA:\r\n            return {\r\n                ...state,\r\n                captchaURL: action.captchaURL\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    userAuth: (id: number, email: string, login: string, auth = false) => ({type: USER_AUTHENTICATION, data: {id, email, login, auth}} as const),\r\n    logout: () => ({type: LOGOUT} as const),\r\n    getCaptcha: (captchaURL: string) => ({type: GET_CAPTCHA, captchaURL} as const),\r\n}\r\n\r\nexport const userAuthentication = (): AuthReducerThunkTypes => {\r\n    return async (dispatch) => {\r\n        const response = await authAPI.getAuth()\r\n        if(response.data.resultCode === 0) {\r\n            const {email, id, login} = response.data.data\r\n            dispatch(actions.userAuth(id, email, login, true))\r\n        } else {\r\n            const message = response.data.messages[0] ? response.data.messages[0] : \"Something goes wrong :(\"\r\n            dispatch(stopSubmit(\"login\", {_error: message}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const userLogin = (email: string, password: string, rememberMe: boolean, captcha: string): AuthReducerThunkTypes => {\r\n    return async (dispatch) => {\r\n        const response = await authAPI.login(email, password, rememberMe, captcha)\r\n        if(response.data.resultCode === 0) {\r\n            await dispatch(userAuthentication())\r\n        } else if(response.data.resultCode === 10) {\r\n            await dispatch(setCaptchaUrl())\r\n        } else {\r\n            const message = response.data.messages[0] ? response.data.messages[0] : \"Something goes wrong :(\"\r\n            dispatch(stopSubmit(\"login\", {_error: message}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const userLogout = (): AuthReducerThunkTypes => {\r\n    return async (dispatch) => {\r\n        const response = await authAPI.logout()\r\n        if(response.data.resultCode === 0) {\r\n            dispatch(actions.logout())\r\n        }\r\n    }\r\n}\r\n\r\nexport const setCaptchaUrl = (): AuthReducerThunkTypes => {\r\n    return async (dispatch) => {\r\n        const response = await authAPI.captcha()\r\n        const captcha = response.data.url\r\n        dispatch(actions.getCaptcha(captcha))\r\n    }\r\n}\r\n\r\ntype AuthReducerInitialStateType = typeof initialState\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\ntype AuthReducerThunkTypes = BaseThunkType<ActionTypes>\r\n\r\nexport default authReducer","export default __webpack_public_path__ + \"static/media/logo.b47f6e0a.svg\";","import h from \"./Header.module.css\";\r\nimport {NavLink, useLocation} from \"react-router-dom\";\r\nimport logo from \"../../logo.svg\"\r\nimport React from \"react\";\r\nimport {Button} from \"antd\";\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    login: string | null,\r\n    auth: boolean | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    userLogout: () => void\r\n}\r\n\r\nconst Header: React.FC<PropsType> = React.memo(({login, auth, userLogout}) => {\r\n    const currentPagePath = useLocation().pathname\r\n    return(\r\n        <header className={h.headerContainer}>\r\n            <div className={h.siteInfo}>\r\n                <img className={h.logo} src={logo} alt=\"\"/>\r\n                <div className={h.networkName}>\r\n                    <span>\r\n                        Sample Social Network\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div className={h.loginInfo}>\r\n                <div className={h.loginContainer}>\r\n                    {auth\r\n                        ?   <div>\r\n                                <span className={h.login}>\r\n                                    {login}\r\n                                </span>\r\n                                <Button type=\"default\" onClick={userLogout}>\r\n                                    Logout\r\n                                </Button>\r\n                            </div>\r\n                        :   currentPagePath !== \"/login\" &&\r\n                        <NavLink to={\"/login\"} activeClassName={h.active}>\r\n                                <Button type={\"default\"}>\r\n                                     Login\r\n                                </Button>\r\n                            </NavLink>}\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n})\r\n\r\nexport default Header","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getId = (state: AppStateType) => {\r\n    return state.auth.id\r\n}\r\n\r\nexport const getEmail = (state: AppStateType) => {\r\n    return state.auth.email\r\n}\r\n\r\nexport const getLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}\r\n\r\nexport const getAuth = (state: AppStateType) => {\r\n    return state.auth.auth\r\n}\r\n\r\nexport const getCaptchaUrl = (state: AppStateType) => {\r\n    return state.auth.captchaURL\r\n}","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {userAuthentication, userLogout} from \"../../redux/authReducer\";\r\nimport Header from \"./Header\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {getAuth, getLogin} from \"../../redux/authSelectors\";\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    login: string | null,\r\n    auth: boolean | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    userAuthentication: () => void\r\n    userLogout: () => void\r\n}\r\n\r\ntype OwnPropsType = {}\r\n\r\nclass HeaderContainer extends Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.userAuthentication()\r\n    }\r\n    render() {\r\n        return <Header login={this.props.login} auth={this.props.auth}\r\n        userLogout={this.props.userLogout}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        login: getLogin(state),\r\n        auth: getAuth(state)\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps, {userAuthentication, userLogout})(HeaderContainer)","import s from \"./Sidebar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst Sidebar: React.FC = React.memo((props) => {\r\n    return(\r\n        <aside className={s.sidebar}>\r\n            <nav className={s.contentWrapper}>\r\n            <div className={s.link}>\r\n                <NavLink to={\"/profile\"} activeClassName={s.active}>\r\n                    Profile\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.link}>\r\n                <NavLink to={\"/users\"} activeClassName={s.active}>\r\n                    Users\r\n                </NavLink>\r\n            </div>\r\n            <div className={s.link}>\r\n                <NavLink to={\"/chat\"} activeClassName={s.active}>\r\n                    Chat\r\n                </NavLink>\r\n            </div>\r\n            </nav>\r\n        </aside>\r\n    )\r\n})\r\n\r\nexport default Sidebar","import f from \"./Footer.module.css\";\r\nimport React from \"react\";\r\n\r\nconst Footer: React.FC = React.memo((props) => {\r\n    return(\r\n        <footer className={f.footer}>\r\n            <div><span>&copy; 2021</span></div>\r\n            <div className={f.flaticonRef}>Icons made by <a href=\"https://www.flaticon.com/authors/becris\" title=\"Becris\">Becris</a> and <a href=\"https://www.flaticon.com/authors/xnimrodx\" title=\"xnimrodx\">xnimrodx</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\r\n        </footer>\r\n    )\r\n})\r\n\r\nexport default Footer","export default __webpack_public_path__ + \"static/media/preloader.fa017795.svg\";","import preloaderIcon from \"./preloader.svg\"\r\nimport React from \"react\";\r\nimport p from \"./Preloader.module.css\"\r\n\r\nconst Preloader: React.FC = React.memo((props) => {\r\n    return(\r\n        <div className={p.preloaderWrapper}>\r\n            <img src={preloaderIcon} alt=\"\"/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Preloader","export default __webpack_public_path__ + \"static/media/avatarMan.0940a2e8.svg\";","export default __webpack_public_path__ + \"static/media/avatarWoman.98c0bda7.svg\";","export type ValidatorsType = (value: string) => string | undefined\r\n\r\nexport const requiredField: ValidatorsType = (value) => {\r\n    if(value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLength = (MaxLength: number): ValidatorsType => (value) => {\r\n    if(value && value.length > MaxLength) return `Max Length is ${MaxLength} symbols`\r\n    return undefined\r\n}","import fc from \"./FormControls.module.css\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {ValidatorsType} from \"../../../utils/validators\";\r\n\r\nconst FormControl: React.FC<WrappedFieldProps> = ({meta: {touched, error}, children, ...props}) => {\r\n    const hasError = touched && error\r\n    return(\r\n        <div className={hasError ? fc.error : \"\"}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError &&\r\n            <div className={fc.errorContainer}>\r\n                <span>{error}</span>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport function CreateField<FormKeyType extends string> (placeholder?: string | undefined, name?: FormKeyType, component?: React.FC<WrappedFieldProps> | string, type?: string | undefined, text = \"\", validate: Array<ValidatorsType> = [], className?: string, onBlur?: any, props = {}) {\r\n    return(\r\n        <div className={className}>\r\n            <span className={text && fc.formText}>{text}</span> <Field placeholder={placeholder} name={name} component={component} type={type} validate={validate} {...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport pi from \"../ProfileInfo.module.css\"\r\nimport {maxLength} from \"../../../../utils/validators\";\r\nimport {CreateField, Input} from \"../../../common/FormControls/FormControls\";\r\nimport React from \"react\";\r\nimport {StatusFormPropsType} from \"./ProfileStatus\";\r\n\r\nconst maxLength20 = maxLength(20)\r\n\r\nconst ProfileStatusInput: React.FC<InjectedFormProps<StatusFormPropsType>> = React.memo(({handleSubmit}) => {\r\n    return(\r\n        <form onBlur={handleSubmit} className={pi.status}>\r\n            {CreateField('', 'status', Input, undefined, '', [maxLength20])}\r\n        </form>\r\n    )\r\n})\r\n\r\nconst ProfileStatusForm = reduxForm<StatusFormPropsType>({form: \"statusForm\"})(ProfileStatusInput)\r\n\r\nexport default ProfileStatusForm","import pi from \"../ProfileInfo.module.css\";\r\nimport React, {useState} from \"react\"\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport ProfileStatusForm from \"./ProfileStatusForm\";\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    userStatus: string,\r\n    isOwner: boolean,\r\n    isFetching: boolean,\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setUserStatus: (status: string) => void\r\n}\r\nexport type StatusFormPropsType = {\r\n    status: string\r\n}\r\n\r\nconst ProfileStatus: React.FC<PropsType> = React.memo(({userStatus, setUserStatus, isOwner, isFetching}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n    }\r\n    const onBlurStatusChange = (formData: StatusFormPropsType) => {\r\n        deactivateEditMode()\r\n        if(formData.status !== userStatus){\r\n            setUserStatus(formData.status)\r\n        }\r\n    }\r\n    const initialValues = {\r\n            status: userStatus\r\n    }\r\n    if (isFetching) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div className={pi.status}>\r\n                    <span onDoubleClick={isOwner ? activateEditMode : undefined}>\r\n                        {userStatus || (isOwner ? \"Double click to set the status\" : \"No status :(\")}\r\n                    </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <ProfileStatusForm onSubmit={onBlurStatusChange} initialValues={initialValues}/>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ProfileStatus","import pi from \"./ProfileInfo.module.css\";\r\nimport {CreateField, Input, Textarea} from \"../../common/FormControls/FormControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../types/types\";\r\nimport React from \"react\";\r\nimport {Button} from \"antd\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = Extract<keyof ProfileType, string>\r\n\r\nconst ProfileDescriptionForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({profile, handleSubmit}) => {\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={pi.descriptionForm}>\r\n                <div className={pi.elementOfDescriptionForm}>\r\n                        <span>\r\n                            <b>Your name and some information about you:</b>\r\n                        </span>\r\n                </div>\r\n                <div className={pi.elementOfDescriptionForm}>\r\n                    {CreateField<ProfileTypeKeys>(\"Your name\", \"fullName\", Input)}\r\n                </div>\r\n                <div className={pi.elementOfDescriptionForm}>\r\n                    {CreateField<ProfileTypeKeys>(\"Some information\", \"aboutMe\", Input)}\r\n                </div>\r\n                <div className={pi.searchJob}>\r\n                    <span>\r\n                        {CreateField<ProfileTypeKeys>(\"\", \"lookingForAJob\", Input, \"checkbox\", \"Looking for a job:\", [], pi.searchJob)}\r\n                    </span>\r\n                </div>\r\n                <div className={pi.elementOfDescriptionForm}>\r\n                    <span>\r\n                        {CreateField<ProfileTypeKeys>(\"Your skills description\", \"lookingForAJobDescription\", Textarea)}\r\n                    </span>\r\n                </div>\r\n                <div>\r\n                    <div className={pi.elementOfDescriptionForm}>\r\n                        <span>\r\n                            <b>Your Contacts:</b>\r\n                        </span>\r\n                    </div>\r\n                    <div>\r\n                        {Object.keys(profile.contacts).map(key => {\r\n                            return <div className={pi.elementOfDescriptionForm} key={key}>\r\n                                <b>{CreateField(key, `contacts.${key}`, Input)}</b>\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <Button type={\"default\"} htmlType={\"submit\"} size={\"small\"}>\r\n                        Submit\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDescriptionReduxForm = reduxForm<ProfileType, PropsType>({form: \"profileDescriptionForm\"})(ProfileDescriptionForm)\r\n\r\nexport default ProfileDescriptionReduxForm","import {ProfilePhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, ServerResponseType} from \"./api\";\r\n\r\ntype UpdatePhotoDataType = {\r\n    photos: ProfilePhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(id: number | null) {\r\n        return instance.get<ProfileType>(`profile/${id}`)\r\n    },\r\n    getUserStatus(id: number) {\r\n        return instance.get<string>(`profile/status/${id}`)\r\n    },\r\n    updateUserStatus(status: string) {\r\n        return instance.put<ServerResponseType>(`profile/status`, {status: status})\r\n    },\r\n    updateProfileInformation(profile: ProfileType) {\r\n        return instance.put<ServerResponseType>('profile', profile)\r\n    },\r\n    updateProfilePhoto(photo: File) {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photo)\r\n        return instance.put<ServerResponseType<UpdatePhotoDataType>>('profile/photo', formData, {headers: {\"Content-Type\": \"multipart/form-data\"}})\r\n    }\r\n}","import {instance, ServerResponseType} from \"./api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\ntype UsersResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(count: number, page: number, term = '', friend: boolean | null = null) {\r\n        return instance.get<UsersResponseType>(`users?count=${count}&page=${page}&term=${term}&friend=${friend}`)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post<ServerResponseType>(`follow/${id}`, {})\r\n    },\r\n    unfollow(id: number) {\r\n        return instance.delete<ServerResponseType>(`follow/${id}`)\r\n    },\r\n    isFollow(id:number) {\r\n        return instance.get<boolean>(`follow/${id}`).then(res => res.data)\r\n    }\r\n}","import {profileAPI} from \"../api/profileApi\";\r\nimport {ProfilePhotosType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {usersAPI} from \"../api/usersApi\";\r\n\r\nconst SET_USER_PROFILE = 'profile/SET_USER_PROFILE'\r\nconst GET_USER_STATUS = 'profile/GET_USER_STATUS'\r\nconst SET_IS_FETCHING = 'profile/SET_IS_FETCHING'\r\nconst SET_NEW_PHOTO = 'profile/SET_NEW_PHOTO'\r\nconst IS_USER_FOLLOWED = 'profile/IS_USER_FOLLOWED'\r\n\r\nconst initialState = {\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    isFetching: false,\r\n    isFollowed: null as boolean | null\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionTypes): ProfileReducerInitialStateType => {\r\n    switch(action.type) {\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case GET_USER_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SET_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case SET_NEW_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            }\r\n        case IS_USER_FOLLOWED:\r\n            return {\r\n                ...state,\r\n                isFollowed: action.payload.isFollowed\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    getNewProfile: (profile: ProfileType | null) => ({type: SET_USER_PROFILE, profile} as const),\r\n    getUserStatus: (status: string) => ({type: GET_USER_STATUS, status} as const),\r\n    setIsFetching: (isFetching: boolean) => ({type: SET_IS_FETCHING, isFetching} as const),\r\n    setNewPhoto: (photos: ProfilePhotosType) => ({type: SET_NEW_PHOTO, photos} as const),\r\n    userIsFollowed: (isFollowed: boolean | null) => ({type: IS_USER_FOLLOWED, payload: {isFollowed}} as const)\r\n}\r\n\r\nexport const setUserProfile = (id: number | null): ProfileReducerThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.setIsFetching(true))\r\n        const response = await profileAPI.getProfile(id)\r\n        dispatch(actions.getNewProfile(response.data))\r\n        dispatch(actions.setIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const getCurrentUserStatus = (id: number): ProfileReducerThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.setIsFetching(true))\r\n        const response = await profileAPI.getUserStatus(id)\r\n        dispatch(actions.getUserStatus(response.data))\r\n        dispatch(actions.setIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const setUserStatus = (status: string): ProfileReducerThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.setIsFetching(true))\r\n        const response = await profileAPI.updateUserStatus(status)\r\n        if(response.data.resultCode === 0) {\r\n            dispatch(actions.getUserStatus(status))\r\n            dispatch(actions.setIsFetching(false))\r\n        }\r\n    }\r\n}\r\n\r\nexport const setUserProfileUpdate = (profile: ProfileType): ProfileReducerThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const id = getState().auth.id\r\n        const response = await profileAPI.updateProfileInformation(profile)\r\n        if(response.data.resultCode === 0) {\r\n            await dispatch(setUserProfile(id))\r\n        }\r\n    }\r\n}\r\n\r\nexport const setNewProfilePhotos = (photos: File): ProfileReducerThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await profileAPI.updateProfilePhoto(photos)\r\n        if(response.data.resultCode === 0) {\r\n            dispatch(actions.setNewPhoto(response.data.data.photos))\r\n        }\r\n    }\r\n}\r\n\r\nexport const isUserFollowed = (id: number): ProfileReducerThunkType => {\r\n    return async (dispatch) => {\r\n        const response = await usersAPI.isFollow(id)\r\n        dispatch(actions.userIsFollowed(response))\r\n    }\r\n}\r\n\r\ntype ProfileReducerInitialStateType = typeof initialState\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\ntype ProfileReducerThunkType = BaseThunkType<ActionTypes>\r\n\r\nexport default profileReducer","import React, {ChangeEvent} from \"react\";\r\nimport pi from \"./ProfileInfo.module.css\"\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setNewProfilePhotos} from \"../../../redux/profileReducer\";\r\n\r\nconst UploadPhotoInput = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            dispatch(setNewProfilePhotos(e.target.files[0]))\r\n        }\r\n    }\r\n    return(\r\n        <div className={pi.inputWrapper}>\r\n            <input type=\"file\" onChange={mainPhotoSelected}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default UploadPhotoInput","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCountSelector = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.followingIsFetching\r\n}\r\n\r\nexport const getCurrentFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}","import {usersAPI} from \"../api/usersApi\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {UserType} from \"../types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ServerResponseType} from \"../api/api\";\r\nimport {AxiosResponse} from \"axios\";\r\n\r\nconst GET_USERS = 'users/GET_USERS'\r\nconst GET_TOTAL_USERS_COUNT = 'users/GET_TOTAL_USERS_COUNT'\r\nconst FOLLOW_UNFOLLOW_USER = 'users/FOLLOW_UNFOLLOW_USER'\r\nconst SET_CURRENT_PAGE = 'user/SET_CURRENT_PAGE'\r\nconst SET_FILTER = 'user/SET_FILTER'\r\nconst FOLLOWING_IS_FETCHING = 'user/FOLLOWING_IS_FETCHING'\r\nconst SET_FETCHING = 'user/SET_FETCHING'\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 3,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingIsFetching: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as boolean | null\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionTypes):UsersReducerInitialStateType => {\r\n    switch(action.type) {\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case GET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsers\r\n            }\r\n        case GET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case SET_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case SET_FILTER:\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        case FOLLOW_UNFOLLOW_USER:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if(u.id === action.id) {\r\n                        return {...u, followed: action.followed}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case FOLLOWING_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                followingIsFetching: action.isFetching ? [...state.followingIsFetching, action.id]\r\n                : state.followingIsFetching.filter(id => id !== action.id)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setCurrentPage: (currentPage = 1) => ({type: SET_CURRENT_PAGE, currentPage} as const),\r\n    getNewUsers: (users: Array<UserType>) => ({type: GET_USERS, users} as const),\r\n    setFetching: (isFetching: boolean) => ({type: SET_FETCHING, isFetching} as const),\r\n    setFilter: (filter: FilterType) => ({type: SET_FILTER, payload: filter} as const),\r\n    followingDataIsFetching: (isFetching: boolean, id: number) => ({type: FOLLOWING_IS_FETCHING, isFetching, id} as const),\r\n    getTotalUsersCount: (totalUsers: number) => ({type: GET_TOTAL_USERS_COUNT, totalUsers} as const),\r\n    followUnfollowUserSuccess: (followed: boolean, id: number) => ({type: FOLLOW_UNFOLLOW_USER, followed, id} as const),\r\n}\r\n\r\n\r\nexport const getUsers = (pageSize: number, page: number, filter: FilterType): UsersReducerThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.setFetching(true))\r\n        dispatch(actions.setFilter(filter))\r\n        dispatch(actions.setCurrentPage(page))\r\n        const response = await usersAPI.getUsers(pageSize, page, filter.term, filter.friend)\r\n        const {items, totalCount} = (response.data)\r\n        dispatch(actions.getNewUsers(items))\r\n        dispatch(actions.getTotalUsersCount(totalCount))\r\n        dispatch(actions.setFetching(false))\r\n    }\r\n}\r\n\r\nexport const followUnfollowUser = async (followValue: boolean, id: number, apiMethod: (id: number) => Promise<AxiosResponse<ServerResponseType>>, actionCreator: (followed: boolean, id: number) => ActionTypes, dispatch: Dispatch) => {\r\n        dispatch(actions.followingDataIsFetching(true, id))\r\n        const response = await apiMethod(id)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(actionCreator(followValue, id))\r\n        }\r\n        dispatch(actions.followingDataIsFetching(false, id))\r\n}\r\n\r\nexport const followUser = (id: number): UsersReducerThunkType => {\r\n    return async (dispatch) => {\r\n        const apiMethod = usersAPI.follow.bind(usersAPI)\r\n        const followValue = true\r\n        const actionCreator = actions.followUnfollowUserSuccess\r\n        await followUnfollowUser(followValue, id, apiMethod, actionCreator, dispatch)\r\n    }\r\n}\r\n\r\nexport const unfollowUser = (id: number): UsersReducerThunkType => {\r\n    return async (dispatch) => {\r\n        const apiMethod = usersAPI.unfollow.bind(usersAPI)\r\n        const followValue = false\r\n        const actionCreator = actions.followUnfollowUserSuccess\r\n        await followUnfollowUser(followValue, id, apiMethod, actionCreator, dispatch)\r\n    }\r\n}\r\n\r\ntype UsersReducerInitialStateType = typeof initialState\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\ntype UsersReducerThunkType = BaseThunkType<ActionTypes>\r\nexport type FilterType = typeof initialState.filter\r\n\r\nexport default usersReducer","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getProfile = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n}\r\n\r\nexport const getStatus = (state: AppStateType) => {\r\n    return state.profilePage.status\r\n}\r\n\r\nexport const getProfileIsFetching = (state: AppStateType) => {\r\n    return state.profilePage.isFetching\r\n}\r\n\r\nexport const getIsFollowed = (state: AppStateType) => {\r\n    return state.profilePage.isFollowed\r\n}","export const userPossiblyIsWoman = (name: string) => {\r\n    return name[name.length - 1] === \"a\"\r\n}","import React, {useEffect, useState} from \"react\"\r\nimport pi from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport iconMan from \"../../../avatarMan.svg\"\r\nimport iconWoman from \"../../../avatarWoman.svg\"\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\nimport ProfileDescriptionReduxForm from \"./ProfileDescriptionForm\";\r\nimport {ProfileContactsType, ProfileType} from \"../../../types/types\";\r\nimport {Button} from \"antd\";\r\nimport UploadPhotoInput from \"./UploadPhotoInput\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingIsFetching} from \"../../../redux/usersSelectors\";\r\nimport {followUser, unfollowUser} from \"../../../redux/usersReducer\";\r\nimport {actions, isUserFollowed} from \"../../../redux/profileReducer\";\r\nimport {getIsFollowed} from \"../../../redux/profileSelectors\";\r\nimport {userPossiblyIsWoman} from \"../../../utils/genderValidator\";\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType,\r\n    userStatus: string,\r\n    isFetching: boolean,\r\n    isOwner: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setUserStatus: (status: string) => void,\r\n    setUserProfileUpdate: (profile: ProfileType) => void,\r\n    setNewProfilePhotos: (photos: File) => void\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = React.memo(({profile, userStatus, setUserStatus, isOwner, isFetching, setUserProfileUpdate}) => {\r\n    const [profileEditMode, setProfileEditMode] = useState(false)\r\n    const isFollowed = useSelector(getIsFollowed)\r\n    const followingIsFetching = useSelector(getFollowingIsFetching)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(actions.getNewProfile(null))\r\n            dispatch(actions.userIsFollowed(null))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(isUserFollowed(profile.userId as number))\r\n    }, [profile.userId])\r\n\r\n    const follow = (userId: number) => {\r\n        dispatch(followUser(userId))\r\n        dispatch(actions.userIsFollowed(true))\r\n    }\r\n\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollowUser(userId))\r\n        dispatch(actions.userIsFollowed(false))\r\n    }\r\n\r\n    const enableEditMode = () => {\r\n        setProfileEditMode(true)\r\n    }\r\n\r\n    const onSubmit = async (formData: ProfileType) => {\r\n        await setUserProfileUpdate(formData)\r\n        setProfileEditMode(false)\r\n    }\r\n\r\n    if (isFetching || isFollowed === null) {\r\n        return <Preloader/>\r\n    }\r\n    return(\r\n        <div className={pi.profileInfoContainer}>\r\n            <div className={pi.photo}>\r\n                <img src={profile?.photos?.large || (userPossiblyIsWoman(profile.fullName) ? iconWoman : iconMan)} alt=\"\"/>\r\n                {isOwner && !profileEditMode ?\r\n                <div>\r\n                    <div className={pi.buttonUnderProfilePhoto}>\r\n                        <Button className={pi.buttonUnderProfilePhoto} type={\"default\"} onClick={enableEditMode}>\r\n                            Edit Page\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                    : isOwner ?\r\n                    <UploadPhotoInput />\r\n                    : isFollowed ?\r\n                                <Button className={pi.buttonUnderProfilePhoto} type={\"default\"} disabled={followingIsFetching.some(id => id === profile.userId)} onClick={() => unfollow(profile.userId as number)}>\r\n                                    Unfollow\r\n                                </Button>\r\n                            : (!isFollowed && !isOwner) &&\r\n                    <Button className={pi.buttonUnderProfilePhoto} type={\"default\"} disabled={followingIsFetching.some(id => id === profile.userId)} onClick={() => follow(profile.userId as number)}>\r\n                    Follow\r\n                    </Button>\r\n                }\r\n            </div>\r\n            {!profileEditMode ?\r\n                <ProfileDescription profile={profile} userStatus={userStatus} setUserStatus={setUserStatus}\r\n                                    isOwner={isOwner} isFetching={isFetching}/>\r\n                : <ProfileDescriptionReduxForm profile={profile} initialValues={profile} onSubmit={onSubmit}/>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\ntype ProfileDescriptionType = {\r\n    profile: ProfileType,\r\n    userStatus: string,\r\n    isOwner: boolean,\r\n    isFetching: boolean,\r\n    setUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileDescription: React.FC<ProfileDescriptionType> = React.memo(({profile, userStatus, setUserStatus, isOwner, isFetching}) => {\r\n    const areContacts = Boolean(Object.values(profile.contacts).map(v => v).filter(r => r)[0])\r\n    return(\r\n        <div className={pi.description}>\r\n            <div className={pi.name}>\r\n                <span>\r\n                    {profile?.fullName}\r\n                </span>\r\n            </div>\r\n            <ProfileStatus userStatus={userStatus} setUserStatus={setUserStatus} isOwner={isOwner} isFetching={isFetching}/>\r\n            {profile?.aboutMe &&\r\n            <div className={pi.elementOfDescription}>\r\n                <span>\r\n                    <b>About me: </b> {profile?.aboutMe}\r\n                </span>\r\n            </div>\r\n            }\r\n            <div>\r\n                <div className={pi.elementOfDescription}>\r\n                    <span>\r\n                        <b>Looking for a job:</b> {profile?.lookingForAJob ? \"yes\" : \"no\"}\r\n                    </span>\r\n                </div>\r\n                {profile?.lookingForAJob &&\r\n                <div className={pi.elementOfDescription}>\r\n                    <span>\r\n                        <b>My skills</b>: {profile?.lookingForAJobDescription}\r\n                    </span>\r\n                </div>\r\n                }\r\n            </div>\r\n            {areContacts &&\r\n            <div>\r\n                <div className={pi.contact}>\r\n                    <span>\r\n                        <b>Contact me:</b>\r\n                    </span>\r\n                </div>\r\n                <div>\r\n                    {Object.keys(profile.contacts).map((key) => {\r\n                        return <Contacts key={key} contactKey={key} contactValue={profile.contacts[key as keyof ProfileContactsType]}/>\r\n                    })}\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    )\r\n})\r\n\r\ntype ContactPropsType = {\r\n    contactKey: string,\r\n    contactValue: string,\r\n}\r\n\r\nconst Contacts: React.FC<ContactPropsType> = React.memo(({contactKey, contactValue, ...props}) => {\r\n    return(\r\n        <div {...props}>\r\n            {contactValue &&\r\n                <div className={pi.elementOfDescription}><p className={pi.contacts}><b>{contactKey}:</b> {contactValue}</p></div>}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ProfileInfo","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport * as React from \"react\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport p from \"./Profile.module.css\"\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    isOwner: boolean,\r\n    isFetching: boolean,\r\n    status: string,\r\n    profile: ProfileType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setUserStatus: (status: string) => void,\r\n    setUserProfileUpdate: (profile: ProfileType) => void,\r\n    setNewProfilePhotos: (photos: File) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = React.memo(({status, profile, isFetching, setUserStatus, isOwner, setUserProfileUpdate, setNewProfilePhotos}) => {\r\n    if(profile !== profile) {\r\n        return <Preloader />\r\n    }\r\n    return(\r\n        <div className={p.profileContainer}>\r\n            <ProfileInfo profile={profile} userStatus={status} setUserStatus={setUserStatus}\r\n                         isFetching={isFetching} isOwner={isOwner} setUserProfileUpdate={setUserProfileUpdate}\r\n                         setNewProfilePhotos={setNewProfilePhotos}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Profile","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getError = (state: AppStateType) => {\r\n    return state.error.error\r\n}","import {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\r\n\r\nconst SET_ERROR = 'error/SET_ERROR'\r\n\r\nconst initialState = {\r\n    error: null as string | null\r\n}\r\n\r\nconst errorReducer = (state = initialState, action: ActionTypes): ErrorReducerInitialStateType => {\r\n    switch(action.type) {\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.payload.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    errorSet: (error: string | null) => ({type: SET_ERROR, payload: {error}} as const)\r\n}\r\n\r\nexport const setError = (error: string | null): ErrorReducerThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.errorSet(error))\r\n    }\r\n}\r\n\r\ntype ErrorReducerInitialStateType = typeof initialState\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\ntype ErrorReducerThunkType = BaseThunkType<ActionTypes>\r\n\r\nexport default errorReducer","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getError} from \"../redux/errorSelectors\";\r\nimport {setError} from \"../redux/errorReducer\";\r\nimport {Alert} from \"antd\";\r\n\r\nfunction withError<WCP> (Component: React.ComponentType<WCP>) {\r\n    return React.memo((props: WCP) => {\r\n        const error = useSelector(getError)\r\n        const dispatch = useDispatch()\r\n        useEffect(() => {\r\n            return () => {\r\n                if(error) {\r\n                    dispatch(setError(null))\r\n                }\r\n            }\r\n        }, [error])\r\n        if (error) {\r\n            return <><Alert\r\n                message=\"Error\"\r\n                description={error}\r\n                type=\"error\"\r\n                showIcon\r\n            /></>\r\n        }\r\n        return (<Component {...props} />)\r\n    })\r\n}\r\n\r\nexport default withError","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router\";\r\nimport {\r\n    actions,\r\n    getCurrentUserStatus,\r\n    setNewProfilePhotos,\r\n    setUserProfile,\r\n    setUserProfileUpdate,\r\n    setUserStatus\r\n} from \"../../redux/profileReducer\";\r\nimport {getId} from \"../../redux/authSelectors\";\r\nimport {getProfile, getProfileIsFetching, getStatus} from \"../../redux/profileSelectors\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport withError from \"../../hoc/withError\";\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType\r\ntype MapStateToPropsType = {\r\n    id: number,\r\n    profile: ProfileType,\r\n    status: string,\r\n    isFetching: boolean,\r\n}\r\ntype MapDispatchToPropsType = {\r\n    setUserProfile: (id: number | null) => void,\r\n    getCurrentUserStatus: (id: number) => void,\r\n    setUserStatus: (status: string) => void,\r\n    setUserProfileUpdate: (profile: ProfileType) => void,\r\n    setNewProfilePhotos: (photos: File) => void,\r\n}\r\ntype OwnPropsType = {\r\n    match: any,\r\n    history: any\r\n}\r\n\r\nclass ProfileContainer extends React.PureComponent<PropsType>{\r\n    refreshProfilePage() {\r\n        let userId = this.props.match.params.userID\r\n        if(!userId){\r\n            userId = this.props.id\r\n            if(!userId){\r\n                this.props.history.push('/login')\r\n                return\r\n            }\r\n        }\r\n        this.props.setUserProfile(userId)\r\n        this.props.getCurrentUserStatus(userId)\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfilePage()\r\n    }\r\n    componentDidUpdate(prevProps: PropsType, prevState: AppStateType) {\r\n        if((prevProps.match.params.userID !== this.props.match.params.userID)\r\n            || (prevProps.status !== this.props.status)) {\r\n            this.refreshProfilePage()\r\n        }\r\n    }\r\n    render() {\r\n        if(!this.props.profile || this.props.isFetching) {\r\n            return <Preloader />\r\n        }\r\n        return <Profile {...this.props} isOwner={!this.props.match.params.userID}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        id: getId(state),\r\n        profile: getProfile(state),\r\n        status: getStatus(state),\r\n        isFetching: getProfileIsFetching(state),\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfile, getCurrentUserStatus, setUserStatus,\r\n        setUserProfileUpdate, setNewProfilePhotos, actions}),\r\n    withError,\r\n    withRouter)\r\n(ProfileContainer)","import u from \"./User.module.css\"\r\nimport iconMan from \"../../../avatarMan.svg\"\r\nimport iconWoman from \"../../../avatarWoman.svg\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport * as React from \"react\";\r\nimport {UserType} from \"../../../types/types\";\r\nimport {followUser, unfollowUser} from \"../../../redux/usersReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getFollowingIsFetching} from \"../../../redux/usersSelectors\";\r\nimport {Button} from \"antd\";\r\nimport {userPossiblyIsWoman} from \"../../../utils/genderValidator\";\r\n\r\ntype PropsType = MapStateToPropsType\r\ntype MapStateToPropsType = {\r\n    user: UserType,\r\n}\r\n\r\nconst User: React.FC<PropsType> = React.memo(({user}) => {\r\n    const followingIsFetching = useSelector(getFollowingIsFetching)\r\n    const dispatch = useDispatch()\r\n    const follow = (userId: number) => {\r\n        dispatch(followUser(userId))\r\n    }\r\n\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollowUser(userId))\r\n    }\r\n    return(\r\n        <div className={u.container}>\r\n            <NavLink to={`/profile/${user.id}`}>\r\n                <img src={user.photos.large || (userPossiblyIsWoman(user.name) ? iconWoman : iconMan)} alt=\"\" className={u.profilePhoto}/>\r\n            </NavLink>\r\n            <div>\r\n                {user.name}\r\n            </div>\r\n            <div>\r\n                {user.status}\r\n            </div>\r\n            {user.followed &&\r\n            <Button size={\"small\"} type={\"default\"} disabled={followingIsFetching.some(id => id === user.id)} onClick={() => unfollow(user.id)}>\r\n                Unfollow\r\n            </Button>\r\n            }\r\n            {!user.followed &&\r\n                <Button size={\"small\"} type={\"default\"} disabled={followingIsFetching.some(id => id === user.id)} onClick={() => follow(user.id)}>\r\n                    Follow\r\n                </Button>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default User","export default __webpack_public_path__ + \"static/media/buttonLeft.e43ebb0d.svg\";","export default __webpack_public_path__ + \"static/media/buttonRight.7d765ffd.svg\";","export default __webpack_public_path__ + \"static/media/buttonDoubleLeft.6471537b.svg\";","export default __webpack_public_path__ + \"static/media/buttonDoubleRight.5ea00a17.svg\";","import React, {useEffect} from \"react\";\r\nimport u from \"./Users.module.css\"\r\nimport {Field, Form, Formik} from 'formik';\r\nimport {useSelector} from \"react-redux\";\r\nimport {getCurrentFilter} from \"../../redux/usersSelectors\";\r\nimport {FilterType} from \"../../redux/usersReducer\";\r\nimport {Button} from \"antd\";\r\nimport {SearchOutlined, CloseSquareOutlined} from '@ant-design/icons';\r\nimport {useHistory} from \"react-router\";\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\ntype FormFriendType = \"null\" | \"true\" | \"false\"\r\n\r\ntype FormType = {\r\n    term: string,\r\n    friend: FormFriendType\r\n}\r\n\r\nconst UsersSearchForm: React.FC<PropsType> = React.memo(({onFilterChanged}) => {\r\n    const history = useHistory()\r\n    const filter = useSelector(getCurrentFilter)\r\n    const isSearch = !!history.location.search.length && history.location.search.substring(1, 12) !== \"currentPage\";\r\n    const submit = (values: FormType, {setSubmitting}: {setSubmitting: (isSubmitting: boolean) => void}) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n        onFilterChanged(filter)\r\n    }\r\n    const resetValues = () => {\r\n        const filter: FilterType = {\r\n            term: '',\r\n            friend: null\r\n        }\r\n        onFilterChanged(filter)\r\n    }\r\n    return(\r\n        <div className={u.searchForm}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{ term: filter.term, friend: String(filter.friend) as FormFriendType }}\r\n                onSubmit={submit}\r\n            >\r\n                {({ isSubmitting }) => {\r\n                    return (\r\n                        <Form>\r\n                            <Field placeholder=\"Enter friends name\" type=\"text\" name=\"term\"/>\r\n                            <Field as=\"select\" name=\"friend\">\r\n                                <option value=\"null\">All</option>\r\n                                <option value=\"true\">Only followed</option>\r\n                                <option value=\"false\">Only unfollowed</option>\r\n                            </Field>\r\n                                <span className={isSearch ? u.searchButtonsInRow : \"\"}>\r\n                                <Button className={u.button} type=\"default\" htmlType={\"submit\"} icon={<SearchOutlined/>} disabled={isSubmitting} shape={isSearch ? 'circle' : 'round'}>\r\n                                    {!isSearch && \"Search\"}\r\n                                </Button>\r\n                            {isSearch &&\r\n                                <Button className={u.button} type=\"default\" onClick={resetValues} htmlType={\"submit\"} icon={<CloseSquareOutlined/>}  shape={\"circle\"}/>\r\n                            }   </span>\r\n                        </Form>\r\n                    );\r\n                }}\r\n            </Formik>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default UsersSearchForm","import User from \"./User/User\";\r\nimport React, {useEffect} from \"react\"\r\nimport u from \"./Users.module.css\"\r\nimport buttonLeft from \"../../buttonLeft.svg\"\r\nimport buttonRight from \"../../buttonRight.svg\"\r\nimport buttonDoubleLeft from \"../../buttonDoubleLeft.svg\"\r\nimport buttonDoubleRight from \"../../buttonDoubleRight.svg\"\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentFilter,\r\n    getCurrentPage,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCountSelector,\r\n    getUsersSelector\r\n} from \"../../redux/usersSelectors\";\r\nimport {FilterType, getUsers} from \"../../redux/usersReducer\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport {useHistory} from \"react-router\";\r\nimport * as queryString from \"querystring\";\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryStringType = {term?: string, friend?: string, currentPage?: string}\r\n\r\nconst Users: React.FC<PropsType> = React.memo(() => {\r\n    const users = useSelector(getUsersSelector)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const totalUsersCount = useSelector(getTotalUsersCountSelector)\r\n    const isFetching = useSelector(getIsFetching)\r\n    const filter = useSelector(getCurrentFilter)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    useEffect(() => {\r\n        const query: QueryStringType = {}\r\n        if(filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.currentPage = String(currentPage)\r\n        history.push({\r\n            pathname: \"/users\",\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    useEffect(() => {\r\n        const parsedQuery = queryString.parse(history.location.search.substring(1)) as QueryStringType\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n        if(parsedQuery.term) actualFilter = {...actualFilter, term: parsedQuery.term}\r\n        if(parsedQuery.friend) actualFilter = {...actualFilter, friend: parsedQuery.friend === \"null\" ? null : parsedQuery.friend === \"true\" ? true : false}\r\n        if(parsedQuery.currentPage) actualPage = Number(parsedQuery.currentPage)\r\n        dispatch(getUsers(pageSize, actualPage, actualFilter))\r\n    },[])\r\n\r\n    const getCurrentUsers = (page: number) => {\r\n        dispatch(getUsers(pageSize, page, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsers(pageSize, 1, filter))\r\n    }\r\n\r\n    if(!users || isFetching){\r\n        return <Preloader />\r\n    }\r\n    const totalPagesCount = Math.ceil(totalUsersCount/pageSize)\r\n    return(\r\n        <div className={u.container}>\r\n            <div className={u.usersWrapper}>\r\n                <div className={u.searchFormAndPage}>\r\n                    <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n                    <div className={u.currentPage}><span><strong>Page {currentPage}</strong></span></div>\r\n                </div>\r\n                <div className={u.usersListAndButtons}>\r\n                {currentPage > 1 ?\r\n                    <div className={u.buttonContainer}>\r\n                        <img src={buttonDoubleLeft} alt=\"\" className={u.arrowButton} onClick={() => getCurrentUsers(currentPage/currentPage)}/>\r\n                        <img src={buttonLeft} alt=\"\" className={u.arrowButton} onClick={() => getCurrentUsers(currentPage - 1)}/>\r\n                    </div>\r\n                    :\r\n                    <div className={u.buttonContainer}>\r\n                    </div>\r\n                }\r\n                <span className={u.usersList}>\r\n                {users.length ?\r\n                    users.map(u => <User key={u.id} user={u}/>)\r\n                    : <div>No users found :(</div>\r\n                }\r\n                    {users.length < pageSize &&\r\n                    <div className={u.notAllUsers} />}\r\n                </span>\r\n                {!!users.length && currentPage !== totalPagesCount ?\r\n                    <div className={u.buttonContainer}>\r\n                        <img src={buttonRight} alt=\"\" className={u.arrowButton}\r\n                             onClick={() => getCurrentUsers(currentPage + 1)}/>\r\n                        <img src={buttonDoubleRight} alt=\"\" className={u.arrowButton}\r\n                             onClick={() => getCurrentUsers(totalPagesCount)}/>\r\n                    </div>\r\n                    :\r\n                    <div className={u.buttonContainer}>\r\n                    </div>\r\n                }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Users","import {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport * as React from \"react\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    auth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        auth: state.auth.auth\r\n    }\r\n}\r\n\r\nfunction withLoginRedirect<WCP> (Component: React.ComponentType<WCP>) {\r\n    function RedirectedComponent(props: PropsType) {\r\n        const {auth, ...restProps} = props\r\n        if (auth) return <Component {...restProps as WCP}/>\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return connect<MapStateToPropsType, MapDispatchToPropsType, WCP, AppStateType>(mapStateToProps)(RedirectedComponent)\r\n}\r\n\r\nexport default withLoginRedirect","import React from \"react\";\r\nimport Users from \"./Users\";\r\nimport withLoginRedirect from \"../../hoc/withLoginRedirect\";\r\nimport {compose} from \"redux\";\r\nimport withError from \"../../hoc/withError\";\r\n\r\nconst UsersContainer: React.FC = React.memo((props) => {\r\n        return (\r\n            <Users/>\r\n        )\r\n    }\r\n)\r\nexport default compose<React.ComponentType>(withError, withLoginRedirect)(UsersContainer)","import {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport lf from \"./LoginForm.module.css\"\r\nimport lfc from \"../common/FormControls/FormControls.module.css\"\r\nimport {CreateField, Input} from \"../common/FormControls/FormControls\";\r\nimport {requiredField} from \"../../utils/validators\";\r\nimport l from \"./Login.module.css\";\r\nimport React from \"react\";\r\nimport {LoginFormDataType} from \"./Loginn\";\r\nimport {Button} from \"antd\";\r\n\r\ntype PropsType = {\r\n    captchaURL: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType, PropsType> & PropsType> = React.memo(({handleSubmit, error, captchaURL}) => {\r\n    return(\r\n        <form onSubmit={handleSubmit} className={lf.loginFormContainer}>\r\n            <div className={l.loginTitle}>Login</div>\r\n            <div>\r\n                {CreateField(\"Email\", \"email\", Input, undefined, undefined, [requiredField])}\r\n                {CreateField(\"Password\", \"password\", Input, \"password\", undefined, [requiredField])}\r\n                {CreateField(undefined, \"rememberMe\", \"input\", \"checkbox\", \"Remember me\")}\r\n            </div>\r\n            { captchaURL &&\r\n            <img src={captchaURL} alt=\"\"/>\r\n            }\r\n            { captchaURL &&\r\n                CreateField(\"Your captcha\", \"captcha\", Input, undefined, undefined, [requiredField])\r\n            }\r\n            { error &&\r\n            <div className={lfc.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <Button type={\"default\"} htmlType={\"submit\"}>\r\n                    Submit\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    )\r\n})\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormDataType, PropsType>({form: \"login\"})(LoginForm)\r\n\r\nexport default LoginReduxForm","import {Redirect} from \"react-router-dom\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport l from \"./Login.module.css\"\r\nimport React from \"react\";\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    auth: boolean,\r\n    captchaURL: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    userLogin: (email: string, password: string, rememberMe: boolean, captcha: string) => void,\r\n    setCaptchaUrl: () => void\r\n}\r\nexport type LoginFormDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\nconst Login: React.FC<PropsType> = React.memo(({auth, userLogin, captchaURL}) => {\r\n    const onSubmit = (formData: LoginFormDataType) => {\r\n        const {email, password, rememberMe, captcha} = formData\r\n        userLogin(email, password, rememberMe, captcha)\r\n    }\r\n    if(auth){\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return(\r\n        <div className={l.loginContainer}>\r\n            <div className={l.loginWrapper}>\r\n            <LoginForm captchaURL={captchaURL} onSubmit={onSubmit} />\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Login","import React from \"react\";\r\nimport Login from \"./Loginn\";\r\nimport {connect} from \"react-redux\";\r\nimport {setCaptchaUrl, userLogin} from \"../../redux/authReducer\";\r\nimport {getAuth, getCaptchaUrl} from \"../../redux/authSelectors\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType\r\ntype MapStateToPropsType = {\r\n    auth: boolean,\r\n    captchaURL: string | null\r\n}\r\ntype MapDispatchToPropsType = {\r\n    userLogin: (email: string, password: string, rememberMe: boolean, captcha: string) => void,\r\n    setCaptchaUrl: () => void\r\n}\r\ntype OwnPropsType = {}\r\n\r\nclass LoginContainer extends React.Component<PropsType>{\r\n    render() {\r\n        return(\r\n            <Login {...this.props} />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        auth: getAuth(state),\r\n        captchaURL: getCaptchaUrl(state)\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps, {userLogin, setCaptchaUrl})(LoginContainer)","import {userAuthentication} from \"./authReducer\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\r\n\r\nconst GET_INITIALIZED = 'app/GET_INITIALIZED'\r\n\r\nconst initialState = {\r\n    isInitialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: ActionTypes): AppReducerInitialStateType => {\r\n    switch(action.type) {\r\n        case GET_INITIALIZED:\r\n            return {\r\n                ...state,\r\n                isInitialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    isInitialized: () => ({type: GET_INITIALIZED} as const)\r\n}\r\n\r\nexport const getInitialized = (): AppReducerThunkType => {\r\n    return async (dispatch) => {\r\n        await dispatch(userAuthentication())\r\n        dispatch(actions.isInitialized())\r\n    }\r\n}\r\n\r\ntype AppReducerInitialStateType = typeof initialState\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\ntype AppReducerThunkType = BaseThunkType<ActionTypes>\r\n\r\nexport default appReducer","let ws: WebSocket | null\r\n\r\nexport type MessageAPIType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string\r\n}\r\nexport type StatusAPIType = \"Pending...\" | \"Ready\" | \"Error\"\r\n\r\ntype SubscriberMessageType = (messages: MessageAPIType[]) => void\r\ntype SubscriberStatusType = (status: StatusAPIType) => void\r\n\r\ntype SubscriberEventType = \"sendMessage\" | \"setStatus\"\r\n\r\nlet subscribers = {\r\n    \"sendMessage\": [] as SubscriberMessageType[],\r\n    \"setStatus\": [] as SubscriberStatusType[]\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    let newMessages = JSON.parse(e.data);\r\n    subscribers[\"sendMessage\"].forEach(s => s(newMessages))\r\n}\r\n\r\nconst closeHandler = () => {\r\n    notifyUserAboutStatus(\"Pending...\")\r\n    setTimeout(createChannel, 3000)\r\n}\r\n\r\nconst openHandler = () => {\r\n    notifyUserAboutStatus(\"Ready\")\r\n}\r\n\r\nconst errorHandler = () => {\r\n    notifyUserAboutStatus(\"Error\")\r\n    console.log('Refresh the Page')\r\n}\r\n\r\nconst notifyUserAboutStatus = (status: StatusAPIType) => {\r\n    subscribers[\"setStatus\"].forEach(s => s(status))\r\n}\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nconst createChannel = () => {\r\n    if(ws !== null) {\r\n        cleanUp()\r\n        ws?.close()\r\n    }\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifyUserAboutStatus(\"Pending...\")\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subscribers[\"sendMessage\"] = []\r\n        subscribers[\"setStatus\"] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(event: SubscriberEventType, callback: SubscriberMessageType | SubscriberStatusType) {\r\n        // @ts-ignore\r\n        subscribers[event].push(callback)\r\n    },\r\n    unsubscribe(event: SubscriberEventType, callback: SubscriberMessageType | SubscriberStatusType) {\r\n        // @ts-ignore\r\n        subscribers[event] = subscribers[event].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}","export function arraysAreEqual(state: any, action: any){\r\n    return !(state.sort() > action.sort() || state.sort() < action.sort())\r\n}","import {BaseThunkType, InferActionsTypes} from \"./reduxStore\";\r\nimport {chatAPI, MessageAPIType, StatusAPIType} from \"../api/chatApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {v4} from 'uuid';\r\nimport {arraysAreEqual} from \"../utils/arraysAreEqual\";\r\n\r\nconst CHAT_MESSAGES_RECEIVED = 'chat/CHAT_MESSAGES_RECEIVED'\r\nconst SET_STATUS = 'chat/SET_STATUS'\r\n\r\nconst initialState = {\r\n    messages: [] as MessageChatType[],\r\n    status: '' as StatusAPIType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionTypes): ChatReducerInitialStateType => {\r\n    switch(action.type) {\r\n        case CHAT_MESSAGES_RECEIVED:\r\n            if((!state.messages[state.messages.length - 1] && (!arraysAreEqual(state.messages, action.payload.messages) || (action.payload.messages.length <= 3)))\r\n                || (state.messages[state.messages.length - 1] && (action.payload.messages.length === 1))){\r\n                return {\r\n                    ...state,\r\n                    messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: v4()}))]\r\n                        .filter((m, index, array) => index >= array.length - 100)\r\n                }\r\n            }\r\n            if ((state.messages[state.messages.length - 1]\r\n                && (!arraysAreEqual(state.messages, action.payload.messages)))\r\n                || ((state.messages.length === 100 && action.payload.messages.length === 101)\r\n                        && (state.messages[state.messages.length - 1].message !== action.payload.messages[state.messages.length].message))) {\r\n                                return {\r\n                                    ...state,\r\n                                    messages: [...state.messages, ...action.payload.messages.slice(state.messages.length - 1).map(m => ({...m, id: v4()}))]\r\n                                }\r\n                            }\r\n            return {...state, messages: state.messages}\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: MessageAPIType[]) => ({type: CHAT_MESSAGES_RECEIVED, payload: {messages}} as const),\r\n    statusChanged: (status: StatusAPIType) => ({type: SET_STATUS, payload: {status}} as const)\r\n}\r\n\r\nlet _newMessageHandler: ((messages: MessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if(_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\nlet _newStatusHandler: ((status: StatusAPIType) => void) | null = null\r\nconst newStatusHandlerCreator = (dispatch: Dispatch) => {\r\n    if(_newStatusHandler === null) {\r\n        _newStatusHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _newStatusHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ChatReducerThunkType => {\r\n    return async (dispatch) => {\r\n        chatAPI.start()\r\n        chatAPI.subscribe(\"sendMessage\", newMessageHandlerCreator(dispatch))\r\n        chatAPI.subscribe(\"setStatus\", newStatusHandlerCreator(dispatch))\r\n    }\r\n}\r\n\r\nexport const stopMessagesListening = (): ChatReducerThunkType => {\r\n    return async (dispatch) => {\r\n        chatAPI.stop()\r\n        chatAPI.unsubscribe(\"sendMessage\", newMessageHandlerCreator(dispatch))\r\n        chatAPI.unsubscribe(\"setStatus\", newStatusHandlerCreator(dispatch))\r\n    }\r\n}\r\n\r\n\r\nexport const sendMessageToChat = (message: string): ChatReducerThunkType => {\r\n    return async (dispatch) => {\r\n        chatAPI.sendMessage(message)\r\n    }\r\n}\r\n\r\ntype ChatReducerInitialStateType = typeof initialState\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\ntype ChatReducerThunkType = BaseThunkType<ActionTypes>\r\nexport type MessageChatType = MessageAPIType & {id: string}\r\n\r\nexport default chatReducer","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport authReducer from \"./authReducer\";\r\nimport usersReducer from \"./usersReducer\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./appReducer\";\r\nimport profileReducer from \"./profileReducer\";\r\nimport chatReducer from \"./chatReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\n\r\nconst reducers = combineReducers({\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n    usersPage: usersReducer,\r\n    profilePage: profileReducer,\r\n    chat: chatReducer,\r\n    error: errorReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\ntype RootReducer = typeof reducers\r\nexport type AppStateType = ReturnType<RootReducer>\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args:any[]) => infer U} ? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nexport default store","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getIsInitialized = (state: AppStateType) => {\r\n    return state.app.isInitialized\r\n}","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getMessages = (state: AppStateType) => {\r\n    return state.chat.messages\r\n}\r\n\r\nexport const getStatus = (state: AppStateType) => {\r\n    return state.chat.status\r\n}","import React, {ChangeEvent, KeyboardEvent, useEffect, useRef, useState} from \"react\";\r\nimport c from \"./Chat.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getMessages, getStatus} from \"../../redux/chatSelectors\";\r\nimport {\r\n    MessageChatType,\r\n    sendMessageToChat,\r\n    startMessagesListening,\r\n    stopMessagesListening\r\n} from \"../../redux/chatReducer\";\r\nimport iconMan from \"../../avatarMan.svg\"\r\nimport iconWoman from \"../../avatarWoman.svg\"\r\nimport {Button} from \"antd\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport withLoginRedirect from \"../../hoc/withLoginRedirect\";\r\nimport {compose} from \"redux\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {userPossiblyIsWoman} from \"../../utils/genderValidator\";\r\nimport withError from \"../../hoc/withError\";\r\n\r\nconst Chat = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n    return(\r\n        <div className={c.chat}>\r\n            <AllMessages />\r\n            <AddMessageForm />\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AllMessages = React.memo(() => {\r\n    const messages = useSelector(getMessages)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(false)\r\n    const messagesEndRef = useRef<HTMLDivElement>(null)\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) <= 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n    })\r\n    useEffect(() => {\r\n        isAutoScroll && scrollToBottom()\r\n    }, [messages, isAutoScroll])\r\n\r\n    return(\r\n        <div className={c.allMessages} onScroll={scrollHandler}>\r\n            {!messages.length && <Preloader />}\r\n            {messages.map((m: MessageChatType) => <ChatMessage message={m} key={m.id} />)}\r\n            <div ref={messagesEndRef} />\r\n        </div>\r\n    )\r\n})\r\n\r\nconst ChatMessage: React.FC<{ message: MessageChatType }> = React.memo(({message}) => {\r\n    return(\r\n        <div>\r\n            <div className={c.chatMessage}>\r\n                <img src={message.photo || (userPossiblyIsWoman(message.userName) ? iconWoman : iconMan)} alt=\"\" className={c.profilePhoto}/>\r\n                <span><b>{message.userName}</b></span>\r\n            </div>\r\n            <div>\r\n                <span>{message.message}</span>\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageForm = React.memo(() => {\r\n    const [message, setMessage] = useState('')\r\n    const status = useSelector(getStatus)\r\n    const dispatch = useDispatch()\r\n    const statusPendingOrError = status === \"Pending...\" || status === \"Error\";\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if(e.currentTarget.value === '\\n') {\r\n            return\r\n        } else if (e.currentTarget.value === ' ') {\r\n            return\r\n        }\r\n        setMessage(e.currentTarget.value)\r\n    }\r\n    const sendMessageHandler = () => {\r\n        if(!statusPendingOrError) {\r\n            if(!message) {\r\n                return\r\n            }\r\n            dispatch(sendMessageToChat(message))\r\n            setMessage('')\r\n        }\r\n    }\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (!statusPendingOrError && (e.shiftKey && e.code === 'Enter')) {\r\n            if (!message) {\r\n                return\r\n            }\r\n            e.preventDefault()\r\n            dispatch(sendMessageToChat(message))\r\n            setMessage('')\r\n        }\r\n    }\r\n    return(\r\n        <div className={c.addMessageForm}>\r\n            <div className={c.textInput}>\r\n                <TextArea placeholder={\"Hold Shift+Enter to send the message.\\nOr use the button under the form.\"} value={message}\r\n                          onChange={onChangeHandler}\r\n                          onKeyDown={onKeyDownHandler}\r\n                          cols={15}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button type={\"default\"} disabled={statusPendingOrError} onClick={sendMessageHandler}>\r\n                    Send\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default compose<React.ComponentType>(withError, withLoginRedirect)(Chat)","import React from \"react\";\r\nimport {Alert} from \"antd\";\r\n\r\nconst Error404: React.FC = React.memo(() => {\r\n    return(\r\n        <div>\r\n            <Alert message=\"Error\"\r\n                   description=\"Page doesn't exist\"\r\n                   type=\"error\"\r\n                   showIcon\r\n            />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Error404","import a from './App.module.css'\nimport Header from \"./components/Header/HeaderContainer\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport Footer from \"./components/Footer/Footer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\"\nimport Users from \"./components/Users/UsersContainer\"\nimport Login from \"./components/Login/LoginContainer\"\nimport {HashRouter, Redirect, Route, Switch} from \"react-router-dom\"\nimport React, {PureComponent} from \"react\";\nimport {connect, Provider} from \"react-redux\";\nimport store, {AppStateType} from \"./redux/reduxStore\";\nimport {compose} from \"redux\";\nimport {getInitialized} from \"./redux/appReducer\";\nimport {withRouter} from \"react-router\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport {getIsInitialized} from \"./redux/appSelectors\";\nimport Chat from \"./components/Chat/Chat\";\nimport 'antd/dist/antd.css'\nimport Error404 from \"./components/Error/Error404\";\nimport {setError} from \"./redux/errorReducer\";\n\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\ntype MapDispatchToPropsType = {\n    getInitialized: () => void,\n    setError: (error: string | null) => void\n}\n\nclass App extends PureComponent<PropsType> {\n    catchAllUnhandledErrors = (promiseRejectionEvent: PromiseRejectionEvent) => {\n        if(promiseRejectionEvent) {\n            console.error(promiseRejectionEvent)\n            const error = promiseRejectionEvent.reason.message || promiseRejectionEvent.reason.response.data.message\n            this.props.setError(error)\n        }\n    }\n    componentDidMount() {\n        this.props.getInitialized()\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\n    }\n    render() {\n        if(!this.props.isInitialized) {\n            return <Preloader />\n        }\n        return (\n            <div className={a.appContent}>\n                <Header/>\n                <Sidebar/>\n                <main className={a.main}>\n                    <Switch>\n                        <Route path={\"/login\"} render={() => <Login/>}/>\n                        <Route path={\"/profile/:userID?\"} render={() => <ProfileContainer />}/>\n                        <Route path={\"/users\"} render={() => <Users/>}/>\n                        <Route path={\"/chat\"} render={() => <Chat />}/>\n                        <Route exact path={\"/\"} render={() => <Redirect to={\"/login\"}/>}/>\n                        <Route path={\"*\"} render={() => <Error404 />}/>\n                    </Switch>\n                </main>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isInitialized: getIsInitialized(state)\n    }\n}\n\nlet AppContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, {getInitialized, setError}),\n    withRouter)(App)\n\nconst SampleSocialNetworkApp: React.FC = React.memo(() => {\n    return (\n        <HashRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </HashRouter>\n    )\n})\n\nexport default SampleSocialNetworkApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport SampleSocialNetworkApp from \"./App\";\n\nReactDOM.render(\n  <SampleSocialNetworkApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__y4aAf\",\"siteInfo\":\"Header_siteInfo__d4-3b\",\"logo\":\"Header_logo__IFq_S\",\"networkName\":\"Header_networkName__1bGcF\",\"loginInfo\":\"Header_loginInfo__ebxpo\",\"loginContainer\":\"Header_loginContainer__2jGym\",\"login\":\"Header_login__2XCRc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__RJHOt\",\"contentWrapper\":\"Sidebar_contentWrapper__3_dJU\",\"link\":\"Sidebar_link__kUnHz\",\"active\":\"Sidebar_active__1I1G0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"Chat_chat__3g1Mx\",\"allMessages\":\"Chat_allMessages__1S8cO\",\"chatMessage\":\"Chat_chatMessage__1GFfk\",\"profilePhoto\":\"Chat_profilePhoto__Dnmjg\",\"addMessageForm\":\"Chat_addMessageForm__3Zqki\",\"textInput\":\"Chat_textInput__wr4ah\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlsContainer\":\"FormControls_controlsContainer__3dcfZ\",\"error\":\"FormControls_error__1o4q_\",\"errorContainer\":\"FormControls_errorContainer__svhno\",\"formSummaryError\":\"FormControls_formSummaryError__Q6rOd\",\"formText\":\"FormControls_formText__3m0I1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__2YA73\",\"loginWrapper\":\"Login_loginWrapper__3bCFA\",\"loginTitle\":\"Login_loginTitle__mhzhR\"};"],"sourceRoot":""}